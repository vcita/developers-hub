{
  "openapi": "3.1.0",
  "info": {
    "title": "Sales",
    "description": "Unified OpenAPI specification for sales domain",
    "version": "3.0",
    "x-generated": {
      "timestamp": "2025-08-31T14:30:30.565Z",
      "sourceFiles": [
        "legacy_v1_sales.json",
        "payments.json",
        "payment_gateway.json",
        "sales_reports.json",
        "coupon.json"
      ],
      "pathNormalizations": [
        {
          "file": "legacy_v1_sales.json",
          "basePath": "/platform/v1",
          "transformations": [
            {
              "original": "/leadgen",
              "normalized": "/platform/v1/leadgen",
              "basePath": "/platform/v1"
            },
            {
              "original": "/estimates",
              "normalized": "/platform/v1/estimates",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payments",
              "normalized": "/platform/v1/payments",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payments/{payment_id}",
              "normalized": "/platform/v1/payments/{payment_id}",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payments/{payment_uid}/match",
              "normalized": "/platform/v1/payments/{payment_uid}/match",
              "basePath": "/platform/v1"
            },
            {
              "original": "/invoices",
              "normalized": "/platform/v1/invoices",
              "basePath": "/platform/v1"
            },
            {
              "original": "/invoices/{invoice_id}",
              "normalized": "/platform/v1/invoices/{invoice_id}",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/cards/sync_card",
              "normalized": "/platform/v1/payment/cards/sync_card",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/cards/{card_id}",
              "normalized": "/platform/v1/payment/cards/{card_id}",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/checkout/",
              "normalized": "/platform/v1/payment/checkout/",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/checkout/{url_key}",
              "normalized": "/platform/v1/payment/checkout/{url_key}",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/client_packages",
              "normalized": "/platform/v1/payment/client_packages",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/client_packages/cancel_redemption",
              "normalized": "/platform/v1/payment/client_packages/cancel_redemption",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/client_packages/update_usage",
              "normalized": "/platform/v1/payment/client_packages/update_usage",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/packages",
              "normalized": "/platform/v1/payment/packages",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/packages/{package_id}",
              "normalized": "/platform/v1/payment/packages/{package_id}",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/settings",
              "normalized": "/platform/v1/payment/settings",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment/settings/update_default_currency",
              "normalized": "/platform/v1/payment/settings/update_default_currency",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment_statuses/{id}/apply_coupon",
              "normalized": "/platform/v1/payment_statuses/{id}/apply_coupon",
              "basePath": "/platform/v1"
            },
            {
              "original": "/payment_statuses/{id}/validate_coupon",
              "normalized": "/platform/v1/payment_statuses/{id}/validate_coupon",
              "basePath": "/platform/v1"
            }
          ]
        }
      ],
      "pathConflicts": [
        {
          "path": "/v3/sales/reports/payments_widget",
          "files": [
            "unknown",
            "sales_reports.json"
          ],
          "winner": "sales_reports.json",
          "resolution": "Used sales_reports.json (newer modification date)",
          "timestamp": "2025-08-31T14:30:30.564Z"
        },
        {
          "path": "/v3/sales/coupons",
          "files": [
            "unknown",
            "coupon.json"
          ],
          "winner": "coupon.json",
          "resolution": "Used coupon.json (newer modification date)",
          "timestamp": "2025-08-31T14:30:30.564Z"
        }
      ],
      "componentConflicts": [],
      "totalPaths": 63,
      "totalComponents": 7
    }
  },
  "servers": [
    {
      "url": "https://api.vcita.biz",
      "description": "Unified API Gateway server"
    }
  ],
  "paths": {
    "/platform/v1/leadgen": {
      "post": {
        "parameters": [
          {
            "description": "A unique identifer of the business. Can be the Business UID or nickname\\external ID",
            "in": "header",
            "name": "X-On-Behalf-Of",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "conversation_uid": "pehfh46jy6c9mlba",
                  "status": "OK",
                  "uid": "jg7vmlf2uwx5m6fy"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Creates a lead",
        "tags": [
          "LeadGen"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/leadgen"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address": {
                    "description": "Lead's address",
                    "type": "string"
                  },
                  "business_id": {
                    "description": "A unique identifier of the business. Can be the Business UID or nickname\\external ID.",
                    "type": "string"
                  },
                  "email": {
                    "description": "Lead email address. Unique per business.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "Lead first name. Mandatory for a new lead.",
                    "type": "string"
                  },
                  "identifier_type": {
                    "description": "Defines which unique identifier will be used to search for an existing lead or create a new one. Possible values: \"email\" or \"unique_id\"",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Lead last name.",
                    "type": "string"
                  },
                  "message_data": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Key and value that will appear in message",
                    "type": "object"
                  },
                  "notifications": {
                    "description": "A list of notifications to send after processing of the lead. Possible values: \"auto-reply\" (thank you email to the end user), \"email\" (notify the business owner) or \"sms\" (text notification to the business owner). None if empty.",
                    "type": "string"
                  },
                  "opt_in": {
                    "description": "Send \"true\" if lead opted in for promotions. Make sure the \"opt-in\" client card field is added to the client card under Settings>Client card.",
                    "type": "string"
                  },
                  "opt_in_transactional_sms": {
                    "description": "Whether the client opts in to receive transactional SMS messages.",
                    "type": "boolean"
                  },
                  "phone": {
                    "description": "Lead phone number.",
                    "type": "string"
                  },
                  "request_data": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Key and value properties that will update new lead and appear in message",
                    "type": "object"
                  },
                  "request_title": {
                    "description": "Request title. Will also be the created conversation title.",
                    "type": "string"
                  },
                  "source": {
                    "description": "Will be displayed to the business owner as the lead source",
                    "type": "string"
                  },
                  "source_url": {
                    "description": "The URL of the page where the lead was created.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Use a client status to categorize clients according to their relationship with your business, default is Lead.",
                    "type": "string"
                  },
                  "system_message": {
                    "description": "A message displayed to the business owner to introduce the lead. May contain links.",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Customized labels that enbale you to sort your data using personalized words, phrases or themes that are meaningful to you and your business",
                    "type": "string"
                  },
                  "unique_id": {
                    "description": "Lead unique id. Unique per business.",
                    "type": "string"
                  }
                },
                "required": [
                  "identifier_type",
                  "first_name",
                  "request_title"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/estimates": {
      "get": {
        "parameters": [
          {
            "description": "Filter by created_at, updated_at, state. state values: issued, approved, draft, invoiced, rejected. available operators for created_at and updated_at: gt, gte, lt, lte, eq. available operators for state: in. example: filter[created_at][gt]=2019-01-01, filter[state][in]=issued,rejected",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by one of the following: created_at, updated_at, state. available operators: asc, desc. example: sort=created_at:asc,updated_at:desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Estimates Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "estimates": [
                      {
                        "address": "habarzel 32\\nTel Aviv",
                        "amount": 8.8,
                        "client_address": "Lombard St, San Francisco, CA",
                        "client_id": "kf9d91uh82bclson",
                        "client_name": "Alice Smith",
                        "conversation_id": "rv28qk5ey5eretu9",
                        "created_at": "2018-06-14T09:31:21.000",
                        "currency": "USD",
                        "due_date": "2018-06-14",
                        "estimate_date": "2018-06-14",
                        "estimate_number": "1",
                        "id": "aaabbbccc112233",
                        "items": [
                          {
                            "amount": 10,
                            "description": "Service Description",
                            "discount": 2,
                            "quantity": 1,
                            "taxes": [
                              {
                                "name": "10 tax",
                                "rate": 10
                              }
                            ],
                            "title": "Item title"
                          }
                        ],
                        "note": "Estimate for your service",
                        "source_data": {
                          "campaign": null,
                          "channel": "",
                          "name": "client_portal",
                          "website_url": null
                        },
                        "staff_id": "mg9d34uh92bclwzg",
                        "status": "draft/issued/approved/rejected/invoiced",
                        "title": "Estimate title"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Estimates List",
        "tags": [
          "Estimates"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/estimates"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Estimate Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "estimate": {
                      "address": "habarzel 32\\nTel Aviv",
                      "amount": 8.8,
                      "client_address": "Lombard St, San Francisco, CA",
                      "client_id": "1kfvtps4a4wlh3lc",
                      "client_name": "Alice Smith",
                      "conversation_id": "rv28qk5ey5eretu9",
                      "created_at": "2018-06-14T09:31:21.000",
                      "currency": "USD",
                      "due_date": "2020-04-24",
                      "estimate_date": "2020-04-20",
                      "estimate_number": "1",
                      "id": "aaabbbccc112233",
                      "items": [
                        {
                          "amount": 10,
                          "description": "Service Description",
                          "discount": 2,
                          "quantity": 1,
                          "taxes": [
                            {
                              "name": "10 tax",
                              "rate": 10
                            }
                          ],
                          "title": "Item title"
                        }
                      ],
                      "note": "Estimate for your service",
                      "source_data": {
                        "campaign": null,
                        "channel": "",
                        "name": "client_portal",
                        "website_url": null
                      },
                      "staff_id": "mg9d34uh92bclwzg",
                      "status": "draft/issued/approved/rejected/invoiced",
                      "title": "Estimate title"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create New Estimate",
        "tags": [
          "Estimates"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/estimates"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address": {
                    "description": "Business address",
                    "type": "string"
                  },
                  "client_address": {
                    "description": "Client's address",
                    "type": "string"
                  },
                  "client_id": {
                    "description": "Client ID",
                    "type": "string"
                  },
                  "client_name": {
                    "description": "Client's name",
                    "type": "string"
                  },
                  "conversation_id": {
                    "description": "Conversation ID",
                    "type": "string"
                  },
                  "currency": {
                    "description": "Estimate currency: USD, ILS etc.",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "Estimate due date, must be later than estimate_date (ISO 8601 format)",
                    "type": "string"
                  },
                  "estimate_date": {
                    "description": "Estimate date (ISO 8601 format)",
                    "type": "string"
                  },
                  "estimate_number": {
                    "description": "Estimate number",
                    "type": "number"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Estimate item amount",
                          "type": "number"
                        },
                        "description": {
                          "description": "Estimate item description",
                          "type": "string"
                        },
                        "discount": {
                          "description": "Estimate item discount",
                          "type": "number"
                        },
                        "quantity": {
                          "description": "Estimate item quantity",
                          "type": "number"
                        },
                        "taxes": {
                          "items": {
                            "properties": {
                              "name": {
                                "description": "Estimate item tax name",
                                "type": "string"
                              },
                              "rate": {
                                "description": "Estimate item tax rate in percentages",
                                "type": "number"
                              }
                            },
                            "required": [
                              "rate",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "title": {
                          "description": "Estimate item title",
                          "type": "string"
                        }
                      },
                      "required": [
                        "title",
                        "amount",
                        "quantity"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "note": {
                    "description": "Estimate note",
                    "type": "string"
                  },
                  "send_email": {
                    "description": "Set to true in order to send the estimate to the client (for issued estimate). Default: false",
                    "type": "boolean"
                  },
                  "source_campaign": {
                    "description": "Source campaign",
                    "type": "string"
                  },
                  "source_channel": {
                    "description": "Source channel",
                    "type": "string"
                  },
                  "source_name": {
                    "description": "Source name",
                    "type": "string"
                  },
                  "source_url": {
                    "description": "Source URL",
                    "type": "string"
                  },
                  "status": {
                    "description": "Possible values: draft, issued, approved, rejected, invoiced. Default: issued",
                    "type": "string"
                  },
                  "title": {
                    "description": "Estimate title",
                    "type": "string"
                  }
                },
                "required": [
                  "client_id",
                  "due_date",
                  "estimate_date",
                  "currency",
                  "address",
                  "items",
                  "title"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payments": {
      "get": {
        "parameters": [
          {
            "description": "Page offset",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Available filters: state: filter[state][in]=paid,pending,failed,refunded,cancelled,archived,incompleted.\n                                                                                           created_at: filter[created_at][eq/lt/lte/gt/gte]=2023-01-01 or 2023-01-01 09:30:00.\n                                                                                           updated_at: filter[updated_at][eq/lt/lte/gt/gte]=2023-01-01 or 2023-01-01 09:30:00.\n                                                                                           client_id: filter[client_id][eq]=client_id.\n                                                                                           invoice_id: filter[invoice_id][eq]=invoice_id.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by one of the following: created_at, updated_at.\n                                                                      Available operators: asc, desc.\n                                                                      Example: sort=created_at:asc,updated_at:desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payments Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payments": [
                      {
                        "amount": 300,
                        "charged_at": "23/4/2019 09:00:00",
                        "client_id": "12344",
                        "conversation_id": "1234",
                        "currency": "USD",
                        "fees": [
                          {
                            "amount": 13,
                            "name": "Taylor Swift Fee"
                          }
                        ],
                        "id": "1234",
                        "note": "Payment Note",
                        "offline": true,
                        "other_payment_method": "bit",
                        "payment_method": "cash/check",
                        "payment_requests": [
                          {
                            "id": "1246"
                          }
                        ],
                        "reference": "123",
                        "state": "paid/refunded",
                        "tips": [
                          {
                            "amount": 100
                          }
                        ],
                        "title": "Payment Title"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Payments List",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payments"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Payment Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment": {
                      "amount": 150,
                      "client_id": "aaabbbccc112233",
                      "conversation_id": "aaabbbccc112233",
                      "created_at": "2019-10-16T13:05:43Z",
                      "currency": "USD",
                      "fees": [
                        {
                          "amount": 13,
                          "name": "Taylor Swift Fee"
                        }
                      ],
                      "marked_as_online": false,
                      "other_payment_method": "bit",
                      "paid_at": "2019-10-15T13:05:43Z",
                      "paid_offline": true,
                      "pay_key": "123456",
                      "payment_action": "record_payment",
                      "payment_id": "aaabbbccc112233",
                      "payment_method": "credit_card",
                      "reference": "123",
                      "send_receipt": true,
                      "staff_id": "aaabbbccc112233",
                      "state": "paid",
                      "tips": [
                        {
                          "amount": 100
                        }
                      ],
                      "title": "Payment Title"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create New Payment",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payments"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "description": "amount",
                    "type": "number"
                  },
                  "client_id": {
                    "description": "client ID",
                    "type": "string"
                  },
                  "currency": {
                    "description": "USD, ILS etc.",
                    "type": "string"
                  },
                  "fees": {
                    "description": "Array of fees (Max 1 fee)",
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Fee amount",
                          "type": "number"
                        },
                        "name": {
                          "description": "Fee name (Max 35 chars)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "amount"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "mark_as_online": {
                    "description": "Enable online refund. Default is disabled",
                    "type": "boolean"
                  },
                  "other_payment_method": {
                    "description": "Max 24 chars",
                    "type": "string"
                  },
                  "paid_at": {
                    "description": "default is now",
                    "type": "string"
                  },
                  "pay_key": {
                    "description": "Max 64 chars",
                    "type": "string"
                  },
                  "payment_method": {
                    "description": "'PayPal', 'Other', 'Cash', 'Credit Card', 'Bank Transfer', 'Cheque'",
                    "type": "string"
                  },
                  "payment_subject_id": {
                    "description": "The ID of the entity for which the payment has been made",
                    "type": "string"
                  },
                  "payment_subject_type": {
                    "description": "The type of entity for which the payment has been made. Available types: 'Meeting', 'EventAttendance', 'Invoice', 'ClientBookingPackage', 'ProductOrder'.",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Max 24 chars",
                    "type": "string"
                  },
                  "send_receipt": {
                    "description": "true, false. default true",
                    "type": "boolean"
                  },
                  "staff_id": {
                    "description": "Default is set to the staff that performed the API call. Business owner is allowed to send staff_id",
                    "type": "string"
                  },
                  "state": {
                    "description": "The current payment state. This field can be used only for creating a pending payment. Value can be only 'pending'",
                    "type": "string"
                  },
                  "tips": {
                    "description": "Array of tips (Max 1 tip)",
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Tip amount",
                          "type": "number"
                        }
                      },
                      "required": [
                        "amount"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "title": {
                    "description": "paid for service or product",
                    "type": "string"
                  }
                },
                "required": [
                  "client_id",
                  "payment_method",
                  "currency",
                  "amount",
                  "title"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payments/{payment_id}": {
      "get": {
        "parameters": [
          {
            "description": "payment's id",
            "in": "path",
            "name": "payment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment": [
                      {
                        "amount": 300,
                        "charged_at": "23/4/2019 09:00:00",
                        "client_id": "12344",
                        "conversation_id": "1234",
                        "currency": "USD",
                        "fees": [
                          {
                            "amount": 13,
                            "name": "Taylor Swift Fee"
                          }
                        ],
                        "id": "1234",
                        "note": "Payment Note",
                        "offline": true,
                        "other_payment_method": "bit",
                        "payment_method": "cash/check",
                        "payment_requests": [
                          {
                            "id": "1246"
                          }
                        ],
                        "reference": "123",
                        "state": "paid/refunded",
                        "tips": [
                          {
                            "amount": 100
                          }
                        ],
                        "title": "Payment Title"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Payment by ID",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.payment_id": "method.request.path.payment_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payments/{payment_id}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/payments/{payment_uid}/match": {
      "post": {
        "parameters": [
          {
            "description": "relevant payment UID",
            "in": "path",
            "name": "payment_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment Matched",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment": {
                      "amount": 1,
                      "client_id": "jfcomkyykiz0mqkw",
                      "conversation_id": "lzxxiv5euh8z18qw",
                      "created_at": "2022-01-19T12:26:15Z",
                      "currency": "ILS",
                      "marked_as_online": false,
                      "other_payment_method": "bit",
                      "paid_at": "2022-01-19T12:26:05Z",
                      "paid_offline": true,
                      "payment_action": "record_payment",
                      "payment_id": "2ulfclwzu8yksj9u",
                      "payment_method": "Cash",
                      "reference": "123",
                      "send_receipt": true,
                      "source_data": {
                        "campaign": "1",
                        "channel": "1",
                        "name": "initiated_by_staff",
                        "website_url": "1"
                      },
                      "state": "paid"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Match Payment",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payments"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "matter_uid": {
                    "description": "The matter uid of the relevant payment",
                    "type": "string"
                  },
                  "payment_status_uid": {
                    "description": "The uid of the relevant payment request to match",
                    "type": "string"
                  }
                },
                "required": [
                  "matter_uid",
                  "payment_status_uid"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/invoices": {
      "get": {
        "parameters": [
          {
            "description": "Filter by created_at, updated_at, state. state values: issued, draft, declined. available operators for created_at and updated_at: gt, gte, lt, lte, eq. available operators for state: in. example: filter[created_at][gt]=2019-01-01, filter[state][in]=issued,draft",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by one of the following: created_at, updated_at, state. available operators: asc, desc. example: sort=created_at:asc,updated_at:desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoices Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoices": [
                      {
                        "address": "habarzel 32\\nTel Aviv",
                        "allow_online_payment": true,
                        "amount": 8.8,
                        "client_id": "aaabbbccc112233",
                        "conversation_id": "rv28qk5ey5eretu9",
                        "created_at": "2018-06-14T09:31:21.000",
                        "currency": "USD",
                        "due_date": "2018-06-14",
                        "id": "aaabbbccc112233",
                        "invoice_number": "6",
                        "issued_at": "2018-06-14",
                        "items": [
                          {
                            "amount": 10,
                            "description": "Service Description",
                            "discount": 2,
                            "quantity": 1,
                            "taxes": [
                              {
                                "name": "10 tax",
                                "rate": 10
                              }
                            ],
                            "title": "Item title"
                          }
                        ],
                        "note": "Invoice for your service",
                        "payment_balance": 5,
                        "payment_state": "pending",
                        "source_data": {
                          "campaign": null,
                          "channel": "",
                          "name": "client_portal",
                          "website_url": null
                        },
                        "staff_id": "mg9d91uh92bclwzg",
                        "status": "issued/draft",
                        "title": "Invoice Title"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Invoices List",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/invoices"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Invoice Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "address": "Oxford st.",
                      "allow_online_payment": false,
                      "amount": 8.8,
                      "client_id": "1kfvtps4a4wlh3lc",
                      "conversation_id": "3brhv2288yuvfmfd",
                      "created_at": "2019-12-17T21:07:04.659Z",
                      "currency": "USD",
                      "due_date": "2019-04-24",
                      "id": "an29s26qnw2pfryh",
                      "invoice_number": 97,
                      "issued_at": "2019-04-20",
                      "items": [
                        {
                          "amount": 10,
                          "description": "Service Description",
                          "discount": 2,
                          "quantity": 1,
                          "taxes": [
                            {
                              "name": "10 tax",
                              "rate": 10
                            }
                          ],
                          "title": "Service"
                        }
                      ],
                      "note": "Invoice for your service",
                      "payment_balance": 8.8,
                      "payment_state": "pending",
                      "source_data": {
                        "campaign": null,
                        "channel": "",
                        "name": "client_portal",
                        "website_url": null
                      },
                      "staff_id": "mg9d91uh92bclwzg",
                      "status": "issued",
                      "title": "INVOICE #0000097"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create New Invoice",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/invoices"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address": {
                    "description": "business address",
                    "type": "string"
                  },
                  "allow_online_payment": {
                    "description": "true, false, default: true if the business is connected to payment provider",
                    "type": "boolean"
                  },
                  "client_id": {
                    "description": "client_uid",
                    "type": "string"
                  },
                  "conversation_id": {
                    "description": "conversation_uid",
                    "type": "string"
                  },
                  "currency": {
                    "description": "USD, ILS etc.",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "invoice due ,must be later than issued_at",
                    "type": "string"
                  },
                  "invoice_number": {
                    "description": "invoice number",
                    "type": "number"
                  },
                  "issued_at": {
                    "description": "invoice issue date",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "invoice item amount",
                          "type": "number"
                        },
                        "description": {
                          "description": "invoice item description",
                          "type": "string"
                        },
                        "discount": {
                          "description": "invoice item discount",
                          "type": "number"
                        },
                        "quantity": {
                          "description": "invoice item quantity",
                          "type": "number"
                        },
                        "taxes": {
                          "items": {
                            "properties": {
                              "name": {
                                "description": "invoice item tax name",
                                "type": "string"
                              },
                              "rate": {
                                "description": "invoice item tax rate in percentages",
                                "type": "number"
                              }
                            },
                            "required": [
                              "rate",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "title": {
                          "description": "invoice item title",
                          "type": "string"
                        }
                      },
                      "required": [
                        "title",
                        "amount",
                        "quantity"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "note": {
                    "description": "invoice note",
                    "type": "string"
                  },
                  "send_email": {
                    "description": "true, false, default false",
                    "type": "boolean"
                  },
                  "source_campaign": {
                    "description": "Source campaign",
                    "type": "string"
                  },
                  "source_channel": {
                    "description": "Source channel",
                    "type": "string"
                  },
                  "source_name": {
                    "description": "Source name",
                    "type": "string"
                  },
                  "source_url": {
                    "description": "Source URL",
                    "type": "string"
                  },
                  "staff_id": {
                    "description": "owner is the default",
                    "type": "string"
                  },
                  "status": {
                    "description": "draft, issued, default issued",
                    "type": "string"
                  },
                  "title": {
                    "description": "invoice title",
                    "type": "string"
                  }
                },
                "required": [
                  "client_id",
                  "due_date",
                  "issued_at",
                  "currency",
                  "address",
                  "items"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/invoices/{invoice_id}": {
      "get": {
        "parameters": [
          {
            "description": "Invoice ID",
            "in": "path",
            "name": "invoice_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoices Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "address": "habarzel 32\\nTel Aviv",
                      "allow_online_payment": true,
                      "amount": 8.8,
                      "client_id": "aaabbbccc112233",
                      "conversation_id": "rv28qk5ey5eretu9",
                      "created_at": "2018-06-14T09:31:21.000",
                      "currency": "USD",
                      "due_date": "2018-06-14",
                      "id": "aaabbbccc112233",
                      "invoice_number": "6",
                      "issued_at": "2018-06-14",
                      "items": [
                        {
                          "amount": 10,
                          "description": "Service Description",
                          "discount": 2,
                          "quantity": 1,
                          "taxes": [
                            {
                              "name": "10 tax",
                              "rate": 10
                            }
                          ],
                          "title": "Item title"
                        }
                      ],
                      "note": "Invoice for your service",
                      "payment_balance": 5,
                      "payment_state": "pending",
                      "source_data": {
                        "campaign": null,
                        "channel": "",
                        "name": "client_portal",
                        "website_url": null
                      },
                      "staff_id": "mg9d91uh92bclwzg",
                      "status": "issued/draft",
                      "title": "Invoice Title"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Invoice By ID",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.invoice_id": "method.request.path.invoice_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/invoices/{invoice_id}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/payment/cards/sync_card": {
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Create sync card",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "card": {
                      "active": true,
                      "business_id": "dk3wvzieadwjmojz",
                      "card_brand": "visa",
                      "cardholder_name": "test card",
                      "client_id": "9ev0ruk82bqk5oqa",
                      "created_at": "2021-02-18T11:09:54.000Z",
                      "default": true,
                      "exp_month": 11,
                      "exp_year": 2022,
                      "id": "so6k0ydbizask6cu",
                      "last_4": "1111",
                      "payment_provider": "stripe",
                      "staff_id": "hs6wse84tqv3kndi",
                      "staff_name": "multi matter pay"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create sync card",
        "tags": [
          "Card"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/cards/sync_card"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "client_id": {
                    "description": "client_uid",
                    "type": "string"
                  },
                  "customer_id": {
                    "description": "The customer ID at the payment gateway",
                    "type": "string"
                  },
                  "datails": {
                    "items": {
                      "properties": {
                        "card_brand": {
                          "description": "card_brand",
                          "type": "string"
                        },
                        "cardholder_name": {
                          "description": "cardholder_name",
                          "type": "string"
                        },
                        "exp_month": {
                          "description": "exp_month",
                          "type": "number"
                        },
                        "exp_year": {
                          "description": "exp_year",
                          "type": "number"
                        },
                        "last_4": {
                          "description": "last_4",
                          "type": "string"
                        }
                      },
                      "required": [
                        "client_id",
                        "external_card_id",
                        "default",
                        "details",
                        "items"
                      ],
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "default": {
                    "description": "true/false. default: false (will be set to true if it is the client's first card)",
                    "type": "boolean"
                  },
                  "external_card_id": {
                    "description": "card id",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/cards/{card_id}": {
      "delete": {
        "description": "Delete saved card.",
        "parameters": [
          {
            "description": "Card ID",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete saved card",
        "tags": [
          "Card"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "requestParameters": {
            "integration.request.path.card_id": "method.request.path.card_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/cards/{card_id}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/payment/checkout/": {
      "put": {
        "description": "Update a checkout process from webhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Payed by checkout",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Send checkout update by webhook ",
        "tags": [
          "Payment Checkout"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/checkout/"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "description": "The charged amount  (You should send this only if you are in sync_flow)",
                    "type": "boolean"
                  },
                  "card": {
                    "description": "The saved card info - (You should send this only if client want to save the card) ",
                    "properties": {
                      "card_id": {
                        "description": "The card id - should be unique value",
                        "type": "string"
                      },
                      "card_info": {
                        "properties": {
                          "card_brand": {
                            "description": "The card brand",
                            "type": "string"
                          },
                          "cardholder_name": {
                            "description": "The card holder name",
                            "type": "string"
                          },
                          "exp_month": {
                            "description": "Expiration month (2 digits)",
                            "type": "string"
                          },
                          "exp_year": {
                            "description": "Expiration year (4 digits)",
                            "type": "string"
                          },
                          "last_4": {
                            "description": "Last 4 digits",
                            "type": "string"
                          }
                        },
                        "required": [
                          "card_brand",
                          "last_4",
                          "exp_month",
                          "exp_year",
                          "cardholder_name"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "created": {
                    "description": "the date of the payment",
                    "type": "string"
                  },
                  "customer_id": {
                    "description": "The customer unique id (You should send this only if client want to save the card)",
                    "type": "string"
                  },
                  "fees": {
                    "description": "Array of fees (Max 1 fee) (Relevant only for when sync_flow is not true)",
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Fee amount",
                          "type": "number"
                        },
                        "name": {
                          "description": "Fee name (Max 35 chars)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "amount"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "payment_method": {
                    "description": "The payment method which was used in checkout. Available methods: 'Credit Card', 'Bank Payment - ACH'.",
                    "type": "string"
                  },
                  "ps_id": {
                    "description": "The payment status uid (You should send this only if you are in sync_flow)",
                    "type": "string"
                  },
                  "state": {
                    "description": "The current payment state. This field can be used only for creating a pending payment. Value can be only 'pending'",
                    "type": "string"
                  },
                  "sync_flow": {
                    "description": "You should send true in case it is a post checkout flow ",
                    "type": "boolean"
                  },
                  "tips": {
                    "description": "Array of tips (Max 1 tip) (Relevant only for when sync_flow is not true)",
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Tip amount",
                          "type": "number"
                        }
                      },
                      "required": [
                        "amount"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "transaction_id": {
                    "description": "The external payment gateway transaction id",
                    "type": "string"
                  },
                  "type": {
                    "description": "checkout.session.completed",
                    "type": "string"
                  },
                  "url_key": {
                    "description": "The url_key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/checkout/{url_key}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "url_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Checkout Info Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "allow_save_card": false,
                    "amount": 20,
                    "client_id": "jdsfhfhjhsfg",
                    "client_store_card_for_business_use": false,
                    "currency": "USD",
                    "email": "nil",
                    "invoice_id": "yrg7iehgv",
                    "name": "XXX",
                    "return_url": "http://xxxx",
                    "terms_and_conditions_type": "text",
                    "terms_and_conditions_value": "terms and conditions"
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Open Checkout For Specific url_key",
        "tags": [
          "Payment Checkout"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.url_key": "method.request.path.url_key"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/checkout/{url_key}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/payment/client_packages": {
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Package added to the client",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "client_package": {
                      "active": "true",
                      "amount": 100,
                      "booking_credits": [
                        {
                          "bookings_usage": "0",
                          "credit_items": [
                            {
                              "bookings_usage": 0,
                              "item_id": "mzuk2kkt7vjnxdwo",
                              "item_type": "SERVICE"
                            }
                          ],
                          "id": "vu1rovse0166a9d9",
                          "total_bookings": "10"
                        }
                      ],
                      "bookings_usage": "0",
                      "business_id": "vqzqruk6nyclxpp6",
                      "client_id": "9yxsdkr1hdjtocpv",
                      "conversation_id": "war7ow99zh14qlty",
                      "created_at": "2020-06-01T21:05:00.562Z",
                      "currency": "USD",
                      "id": "m73jkvg4bf2z71b2",
                      "image_path": "",
                      "name": "Music Lessons",
                      "package_id": "v2fvy50p8gjuvnvb",
                      "payment_status_id": "6v5ybwkavv0z9hff",
                      "payment_status_state": "pending",
                      "products": [
                        {
                          "id": "03nmq2uih783ro0g",
                          "name": "product1_name",
                          "quantity": 2
                        },
                        {
                          "id": "57ndq2uih503rca8",
                          "name": "product2_name",
                          "quantity": 4
                        }
                      ],
                      "staff_id": "mg9d91uh92bclwzg",
                      "total_bookings": "10",
                      "valid_from": "2020-06-01",
                      "valid_until": "2020-07-01"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Add package to client [Alpha]",
        "tags": [
          "Client Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/client_packages"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "client_id": {
                    "description": "Client ID",
                    "type": "string"
                  },
                  "conversation_id": {
                    "description": "Conversation ID",
                    "type": "string"
                  },
                  "package_id": {
                    "description": "Package ID",
                    "type": "string"
                  },
                  "price": {
                    "description": "Price. Default: package price.",
                    "type": "number"
                  },
                  "valid_from": {
                    "description": "First valid date of the client package (ISO 8601 format)",
                    "type": "string"
                  },
                  "valid_until": {
                    "description": "Last valid date of the client package (ISO 8601 format). Default: will be set according to package expiration.",
                    "type": "string"
                  }
                },
                "required": [
                  "client_id",
                  "package_id",
                  "valid_from"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/client_packages/cancel_redemption": {
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Client package credit updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Cancel Client Package Credit Redemption [Alpha]",
        "tags": [
          "Client Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/clients/payment/client_packages/cancel_redemption"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_status_id": {
                    "description": "Payment status ID",
                    "type": "string"
                  }
                },
                "required": [
                  "payment_status_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/client_packages/update_usage": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Client package credit updated using payment_status_id",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "package_name": "Package Name"
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure with payment_status_id",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Use Client Package Credit [Alpha]",
        "tags": [
          "Client Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/clients/payment/client_packages/update_usage"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "matter_uid": {
                    "description": "Matter/Conversation UID. If not provided, the system will attempt to find the default matter for the client.",
                    "type": "string"
                  },
                  "payment_status_uid": {
                    "description": "Payment status UID",
                    "type": "string"
                  }
                },
                "required": [
                  "payment_status_uid"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/packages": {
      "get": {
        "parameters": [
          {
            "description": "if exists the packages returns with their items",
            "in": "query",
            "name": "include_items",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "if exists the packages returns only active packages",
            "in": "query",
            "name": "active_only",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages Info Retrieved with active packages only",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "packages": [
                      {
                        "active": true,
                        "currency": "USD",
                        "description": "Package description",
                        "discount_amount": "25",
                        "discount_unit": "f",
                        "expiration": 1,
                        "expiration_unit": "m",
                        "id": "456687634585436",
                        "image_path": null,
                        "name": "Package name",
                        "online_payment_enabled": true,
                        "price": "223.5",
                        "products": [
                          {
                            "id": "03nmq2uih783ro0g",
                            "name": "product1_name",
                            "quantity": 2
                          },
                          {
                            "id": "57ndq2uih503rca8",
                            "name": "product2_name",
                            "quantity": 4
                          }
                        ],
                        "total_bookings": "10"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get all package of business",
        "tags": [
          "Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {},
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/packages"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "description": "Create a package and its corresponding items",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Package Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Package ",
        "tags": [
          "Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/packages"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "currency": {
                    "description": "The items currency",
                    "type": "string"
                  },
                  "description": {
                    "description": "The package description",
                    "type": "string"
                  },
                  "discount_amount": {
                    "description": "Package discount amount (Only for view purposes)",
                    "type": "number"
                  },
                  "discount_unit": {
                    "description": "Package discount unit [F-Fixed, P-Percentage] (Only for view purposes)",
                    "type": "string"
                  },
                  "expiration": {
                    "description": "Once package is instanced for a client, it will be valid for expiration number X expiration unit   ",
                    "type": "number"
                  },
                  "expiration_unit": {
                    "description": "The expiration unit (M-Month, D-Day, W-Week, Y-Year)",
                    "type": "string"
                  },
                  "image_path": {
                    "description": "The package's image path",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "services": {
                          "items": {
                            "properties": {
                              "id": {
                                "description": "Item uid",
                                "type": "number"
                              }
                            },
                            "required": [
                              "total_bookings",
                              "id"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total_bookings": {
                          "description": "Usage number allowed for specific item within the package",
                          "type": "number"
                        }
                      },
                      "required": [
                        "total_bookings",
                        "services"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the package",
                    "type": "string"
                  },
                  "online_payment_enabled": {
                    "description": "Online payments enabled?",
                    "type": "boolean"
                  },
                  "price": {
                    "description": "The price of the package",
                    "type": "number"
                  },
                  "products": {
                    "description": "Products included in the package. Up to 3 different products allowed.",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "Product ID",
                          "type": "number"
                        },
                        "quantity": {
                          "description": "Product's quantity, must be greater than 0, up to 5 items allowed.",
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "quantity"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "price",
                  "currency",
                  "items",
                  "expiration",
                  "expiration_unit"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/packages/{package_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package Info Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "package": {
                      "active": true,
                      "currency": "USD",
                      "description": "Package description",
                      "discount_amount": "25",
                      "discount_unit": "f",
                      "expiration": 1,
                      "expiration_unit": "m",
                      "id": "456687634585436",
                      "image_path": null,
                      "items": [
                        {
                          "services": [
                            {
                              "id": "6f156jl6z3bqwn1c",
                              "name": "Yoga Class"
                            }
                          ],
                          "total_bookings": "5"
                        },
                        {
                          "services": [
                            {
                              "id": "eeyt3rk4vk4abl5v",
                              "name": "Spinning Class"
                            }
                          ],
                          "total_bookings": "5"
                        }
                      ],
                      "name": "Package name",
                      "online_payment_enabled": true,
                      "price": "223.5",
                      "products": [
                        {
                          "id": "03nmq2uih783ro0g",
                          "name": "product1_name",
                          "quantity": 2
                        },
                        {
                          "id": "57ndq2uih503rca8",
                          "name": "product2_name",
                          "quantity": 4
                        }
                      ],
                      "total_bookings": 10
                    }
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Show package info",
        "tags": [
          "Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.package_id": "method.request.path.package_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/packages/{package_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "package": {
                      "active": true,
                      "currency": "USD",
                      "description": "Package description",
                      "discount_amount": "25",
                      "discount_unit": "f",
                      "expiration": 1,
                      "expiration_unit": "m",
                      "id": "456687634585436",
                      "image_path": null,
                      "items": [
                        {
                          "services": [
                            {
                              "id": "6f156jl6z3bqwn1c",
                              "name": "Yoga Class"
                            }
                          ],
                          "total_bookings": "5"
                        },
                        {
                          "services": [
                            {
                              "id": "eeyt3rk4vk4abl5v",
                              "name": "Spinning Class"
                            }
                          ],
                          "total_bookings": "5"
                        }
                      ],
                      "name": "Package name",
                      "online_payment_enabled": true,
                      "price": "223.5",
                      "products": [
                        {
                          "id": "03nmq2uih783ro0g",
                          "name": "product1_name",
                          "quantity": 2
                        },
                        {
                          "id": "57ndq2uih503rca8",
                          "name": "product2_name",
                          "quantity": 4
                        }
                      ],
                      "total_bookings": 10
                    }
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "error": "Error Message",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update package [Alpha]",
        "tags": [
          "Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.package_id": "method.request.path.package_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/packages/{package_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "package": {
                    "properties": {
                      "currency": {
                        "description": "The items currency",
                        "type": "string"
                      },
                      "description": {
                        "description": "The package description",
                        "type": "string"
                      },
                      "discount_amount": {
                        "description": "Package discount amount (Only for view purposes)",
                        "type": "number"
                      },
                      "discount_unit": {
                        "description": "Package discount unit [F-Fixed, P-Percentage] (Only for view purposes)",
                        "type": "string"
                      },
                      "expiration": {
                        "description": "Once package is instanced for a client, it will be valid for expiration number X expiration unit",
                        "type": "number"
                      },
                      "expiration_unit": {
                        "description": "The expiration unit (M-Month, D-Day, W-Week, Y-Year)",
                        "type": "string"
                      },
                      "image_path": {
                        "description": "The package's image path",
                        "type": "string"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "services": {
                              "items": {
                                "properties": {
                                  "id": {
                                    "description": "Item uid",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "total_bookings",
                                  "id"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "total_bookings": {
                              "description": "Usage number allowed for specific item within the package",
                              "type": "number"
                            }
                          },
                          "required": [
                            "total_bookings",
                            "services"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "The name of the package",
                        "type": "string"
                      },
                      "online_payment_enabled": {
                        "description": "Online payments enabled?",
                        "type": "boolean"
                      },
                      "price": {
                        "description": "The price of the package",
                        "type": "number"
                      },
                      "products": {
                        "description": "Package's products. [] will remove the package's products",
                        "items": {
                          "properties": {
                            "id": {
                              "description": "Product ID",
                              "type": "number"
                            },
                            "quantity": {
                              "description": "Product's quantity, must be greater than 0.",
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "quantity"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "package"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/settings": {
      "get": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Settings Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_settings": {
                      "allow_bank_debit_on_checkout": true,
                      "allow_bank_debit_on_checkout_enabled": true,
                      "allow_credit_card": true,
                      "allow_view_payments": true,
                      "billing_address": null,
                      "braintree_merchant_id": null,
                      "client_store_card_for_business_use": true,
                      "connected_payment_gateways": [
                        "stripe",
                        "paypal"
                      ],
                      "currency": "USD",
                      "enable_tips_for_bo": true,
                      "enable_tips_for_cp": true,
                      "estimate_terms": null,
                      "ewallet_type": "paypal",
                      "hide_powered_by": null,
                      "invoice_terms": null,
                      "matter_terms": null,
                      "multiple_currencies": true,
                      "partial_payments_enabled": true,
                      "payments_enabled": true,
                      "payments_gateway_type": "stripe",
                      "paypal_email": "fake@fake.com",
                      "pdf_customization_color": null,
                      "pdf_customization_cover": null,
                      "pdf_customization_logo_size": null,
                      "pdf_customization_template": null,
                      "show_taxes": true,
                      "store_card_for_business_use_enabled": true,
                      "stripe_access_token": "fake_token",
                      "stripe_email": "fake@fake.com",
                      "stripe_user_id": "fake_user_id",
                      "supported_currencies": [
                        "USD",
                        "EUR",
                        "GBP"
                      ],
                      "tax_mode": null,
                      "terms_and_conditions_type": "text",
                      "terms_and_conditions_value": "terms and conditions",
                      "tips": [
                        {
                          "type": "percent",
                          "value": 10
                        },
                        {
                          "type": "percent",
                          "value": 15
                        }
                      ],
                      "vcita_payments_business_profession_code": null
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Current Payment Settings",
        "tags": [
          "Payment Settings"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/settings"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Settings Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_settings": {
                      "allow_bank_debit_on_checkout": true,
                      "allow_bank_debit_on_checkout_enabled": true,
                      "allow_credit_card": true,
                      "allow_view_payments": true,
                      "billing_address": "123 Fake St",
                      "braintree_merchant_id": "fake_merchant_id",
                      "client_store_card_for_business_use": true,
                      "connected_payment_gateways": [
                        "stripe"
                      ],
                      "currency": "USD",
                      "enable_tips_for_bo": true,
                      "enable_tips_for_cp": true,
                      "estimate_terms": "30 days",
                      "ewallet_type": "paypal",
                      "hide_powered_by": true,
                      "invoice_terms": "30 days",
                      "matter_term": "Term",
                      "multiple_currencies": true,
                      "partial_payments_enabled": true,
                      "payments_enabled": true,
                      "payments_gateway_type": "stripe",
                      "paypal_email": "fake@fake.com",
                      "pdf_customization_color": "#000000",
                      "pdf_customization_cover": "default",
                      "pdf_customization_logo_size": "medium",
                      "pdf_customization_template": "default",
                      "show_taxes": true,
                      "store_card_for_business_use_enabled": true,
                      "stripe_access_token": "fake_token",
                      "stripe_email": "fake@fake.com",
                      "stripe_user_id": "fake_user_id",
                      "supported_currencies": [
                        "USD",
                        "EUR",
                        "GBP"
                      ],
                      "tax_mode": "exclude",
                      "terms_and_conditions_type": "text",
                      "terms_and_conditions_value": "terms and conditions",
                      "tips": [
                        {
                          "type": "percent",
                          "value": 10
                        },
                        {
                          "type": "percent",
                          "value": 15
                        },
                        {
                          "type": "percent",
                          "value": 20
                        }
                      ],
                      "vcita_payments_business_profession_code": "1234"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Payment Settings",
        "tags": [
          "Payment Settings"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment/settings"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_settings": {
                    "properties": {
                      "allow_bank_debit_on_checkout": {
                        "description": "Allow Bank Debit on Checkout",
                        "type": "boolean"
                      },
                      "allow_credit_card": {
                        "description": "Allow Credit Card",
                        "type": "boolean"
                      },
                      "allow_view_payments": {
                        "description": "Allow View Payments",
                        "type": "boolean"
                      },
                      "braintree_access_token": {
                        "description": "Braintree Access Token",
                        "type": "string"
                      },
                      "braintree_merchant_id": {
                        "description": "Braintree Merchant ID",
                        "type": "string"
                      },
                      "braintree_refresh_token": {
                        "description": "Braintree Refresh Token",
                        "type": "string"
                      },
                      "client_store_card_for_business_use": {
                        "description": "Client Store Card for Business Use",
                        "type": "boolean"
                      },
                      "currency": {
                        "description": "3 Character Currency Code (PLN,GBP,EUR,USD,CSK,JPY,RUB)",
                        "type": "string"
                      },
                      "enable_tips_for_bo": {
                        "description": "Enable Tips for back office",
                        "type": "boolean"
                      },
                      "enable_tips_for_cp": {
                        "description": "Enable Tips for client portal",
                        "type": "boolean"
                      },
                      "ewallet_type": {
                        "description": "eWallet Type (valid: \"paypal\")",
                        "type": "string"
                      },
                      "multiple_currencies": {
                        "description": "Support Multiple Currencies",
                        "type": "boolean"
                      },
                      "payments_enabled": {
                        "description": "Enable Payments",
                        "type": "boolean"
                      },
                      "payments_gateway_type": {
                        "description": "Payments Gateway Type",
                        "type": "string"
                      },
                      "paypal_email": {
                        "description": "Paypal Payment Email",
                        "type": "string"
                      },
                      "stripe_access_token": {
                        "description": "Stripe Access Token",
                        "type": "string"
                      },
                      "stripe_email": {
                        "description": "Stripe Email",
                        "type": "string"
                      },
                      "stripe_user_id": {
                        "description": "Stripe User ID",
                        "type": "string"
                      },
                      "terms_and_conditions_type": {
                        "description": "Terms and Conditions Type",
                        "type": "string"
                      },
                      "terms_and_conditions_value": {
                        "description": "Terms and Conditions Value",
                        "type": "string"
                      },
                      "tips": {
                        "description": "Array of tips, can be empty or contain exactly 3 items",
                        "items": {
                          "properties": {
                            "type": {
                              "description": "Tip Type (valid: \"percent\")",
                              "type": "string"
                            },
                            "value": {
                              "description": "Tip Value (valid: 1-99)",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/payment/settings/update_default_currency": {
      "put": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Default Currency Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "currency": "USD"
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Default Currency",
        "tags": [
          "Payment Settings"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/payment_statuses/{id}/apply_coupon": {
      "put": {
        "parameters": [
          {
            "description": "payment status id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Coupon code",
            "in": "query",
            "name": "coupon_code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon Applied",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_status": {
                      "amount_to_pay_h": "$8.00 USD",
                      "balance_h": "$8.00 USD",
                      "currency": "USD",
                      "id": "ej27h4bjknw0g6dh",
                      "price": "8.0",
                      "price_before_coupon": "10",
                      "state": "pending"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Coupon",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid Coupon",
                  "error_code": "INVALID_COUPON",
                  "status": "Error"
                }
              }
            }
          }
        },
        "summary": "Apply Coupon",
        "tags": [
          "Payment Statuses"
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.id": "method.request.path.id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment_statuses/{id}/validate_coupon"
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/platform/v1/payment_statuses/{id}/validate_coupon": {
      "get": {
        "parameters": [
          {
            "description": "payment status id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Coupon code",
            "in": "query",
            "name": "coupon_code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Coupon",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_status": {
                      "amount_to_pay_h": "$8.00 USD",
                      "balance_h": "$8.00 USD",
                      "currency": "USD",
                      "id": "ej27h4bjknw0g6dh",
                      "price": "8.0",
                      "price_before_coupon": "10",
                      "state": "pending"
                    }
                  },
                  "status": "OK"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Coupon",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid Coupon",
                  "error_code": "INVALID_COUPON",
                  "status": "Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Validate Coupon",
        "tags": [
          "Payment Statuses"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.id": "method.request.path.id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/payment_statuses/{id}/validate_coupon"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/card_requests": {
      "post": {
        "description": "Creates a Card Request",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "card_request": {
                      "channel": "sms",
                      "client_uid": "2ug8kox93vc7ahwf",
                      "created_at": "2025-08-05T06:53:46Z",
                      "last_requested_at": "2025-08-05T06:53:46Z",
                      "staff_uid": "00215830e0950e57",
                      "uid": "fe59cwfgr76yzhdi",
                      "updated_at": "2025-08-05T06:53:46Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Card Request",
        "tags": [
          "Card Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/card_requests"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "card_request": {
                    "properties": {
                      "alpha2": {
                        "description": "Country code",
                        "type": "string"
                      },
                      "channel": {
                        "description": "channel type, possible values: email / sms",
                        "type": "string"
                      },
                      "channel_value": {
                        "description": "channel value, possible values: email / phone number",
                        "type": "string"
                      },
                      "client_uid": {
                        "description": "Client UID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "client_uid",
                      "channel",
                      "channel_value"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "card_request"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/card_requests/{client_uid}": {
      "get": {
        "description": "Gets a Card Request",
        "parameters": [
          {
            "description": "Client UID",
            "in": "path",
            "name": "client_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "card_request": {
                      "channel": "sms",
                      "client_uid": "2ug8kox93vc7ahwf",
                      "created_at": "2025-08-05T06:53:46Z",
                      "last_requested_at": "2025-08-05T06:53:46Z",
                      "staff_uid": "00215830e0950e57",
                      "uid": "fe59cwfgr76yzhdi",
                      "updated_at": "2025-08-05T06:53:46Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Card Request",
        "tags": [
          "Card Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/card_requests/{client_uid}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/cards/{uid}": {
      "put": {
        "description": "Updates a Card",
        "parameters": [
          {
            "description": "Card UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "card": {
                      "active": true,
                      "business_id": "9487420d62e8a61d",
                      "card_brand": null,
                      "cardholder_name": null,
                      "client_id": "1g36ed0wz9yhpnbc",
                      "created_at": "2025-08-05T09:53:48.525+03:00",
                      "default": true,
                      "exp_month": null,
                      "exp_year": null,
                      "id": "4y9q965ktpsglxoj",
                      "initiator": null,
                      "last_4": null,
                      "payment_provider": "stripe",
                      "staff_id": null,
                      "staff_name": "",
                      "usage_permission": "all"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Card",
        "tags": [
          "card"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/cards/{uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "card": {
                    "properties": {
                      "default": {
                        "description": "Indicates whether the card is the default card for the business. Only true value is accepted. To remove a card's default status, set another card as default instead.",
                        "type": "boolean"
                      },
                      "usage_permission": {
                        "description": "Card usage_permission, possible values: all / client",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "card"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/carts": {
      "post": {
        "description": "Creates a Sale",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created sale",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "cart": {
                      "cart_number": 2,
                      "cart_type": null,
                      "created_at": "2025-08-05T09:53:52.977+03:00",
                      "currency": "USD",
                      "is_sale": null,
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": "nil",
                          "discount": {
                            "amount": 10
                          },
                          "entity_name": "Drum sticks",
                          "entity_type": "Product",
                          "entity_uid": "ztytw16puobna058",
                          "grand_total": 100,
                          "name": "Shampoo",
                          "quantity": 1,
                          "sub_total": 100,
                          "taxes": [],
                          "uid": null,
                          "unit_amount": 100
                        }
                      ],
                      "matter_uid": "1ei99zpv9sayyhnc",
                      "payment_request_uid": "yvn9ufix3aq8twiy",
                      "sub_total": "100.0",
                      "taxes": [],
                      "title": "Multi-item #0000002",
                      "total_price": "100.0",
                      "uid": "jdvrqcqvf9cnf2f1",
                      "updated_at": "2025-08-05T09:53:52.977+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "missing",
                      "message": "Not Found"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Sale",
        "tags": [
          "Sales"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/carts"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cart": {
                    "properties": {
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "items": {
                        "description": "Items of the sale - Services / Products / Meeting / EventAttendance / ProductOrder",
                        "items": {
                          "properties": {
                            "amount": {
                              "description": "Amount of the item. For free items, the amount should be 0",
                              "type": "number"
                            },
                            "description": {
                              "description": "Description of the item",
                              "type": "string"
                            },
                            "discount": {
                              "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                              "properties": {
                                "amount": {
                                  "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                  "type": "number"
                                },
                                "percent": {
                                  "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "entity_name": {
                              "description": "Name of the entity (will be used in the reports)",
                              "type": "string"
                            },
                            "entity_type": {
                              "description": "Possible values: Service / Product / Package / Meeting / EventAttendance / ProductOrder / ClientBookingPackage / Custom",
                              "type": "string"
                            },
                            "entity_uid": {
                              "description": "The UID of the entity",
                              "type": "string"
                            },
                            "taxes": {
                              "items": {
                                "properties": {
                                  "name": {
                                    "description": "Tax name",
                                    "type": "string"
                                  },
                                  "rate": {
                                    "description": "Tax rate (percentage, up to 3 decimal places). The rate should be greater than 0 and less than or equal to 100.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_uid",
                            "entity_type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "matter_uid": {
                        "description": "Matter UID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "currency",
                      "items",
                      "matter_uid"
                    ],
                    "type": "object"
                  },
                  "is_sale": {
                    "description": "Required - Should create a sale (Required value = true)",
                    "type": "boolean"
                  }
                },
                "required": [
                  "cart",
                  "is_sale"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/carts/{uid}": {
      "get": {
        "description": "Show specific sale data",
        "parameters": [
          {
            "description": "Sale UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "cart": {
                      "cart_number": 1,
                      "cart_type": "catalog",
                      "created_at": "2025-08-05T09:54:45.240+03:00",
                      "currency": "USD",
                      "is_sale": true,
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_name": "Drum sticks",
                          "entity_type": "Product",
                          "entity_uid": "ztytw16puobna058",
                          "fee_type": null,
                          "grand_total": "100.0",
                          "item_index": null,
                          "name": "Drum sticks",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 1,
                          "sub_total": "100.0",
                          "taxes": [],
                          "uid": "xa081ynil58lkqm5",
                          "unit_amount": "100.0"
                        }
                      ],
                      "matter_uid": "1ei99zpv9sayyhnc",
                      "payment_request_uid": "z64bopfhichave18",
                      "sub_total": "100.0",
                      "taxes": [],
                      "title": "Sale #1 - Drum sticks",
                      "total_price": "100.0",
                      "uid": "huohc4fdomgl83gw",
                      "updated_at": "2025-08-05T09:54:45.240+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Sale",
        "tags": [
          "Sales"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/carts/{uid}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/carts/{uid}/cancel": {
      "put": {
        "description": "Cancel a sale",
        "parameters": [
          {
            "description": "Sale UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "cart": {
                      "cart_number": 1,
                      "cart_type": "catalog",
                      "created_at": "2025-08-05T09:54:45.240+03:00",
                      "currency": null,
                      "is_sale": true,
                      "items": [
                        {
                          "cost": null,
                          "currency": null,
                          "description": null,
                          "discount": null,
                          "entity_name": "Drum sticks",
                          "entity_type": "Product",
                          "entity_uid": "ztytw16puobna058",
                          "fee_type": null,
                          "grand_total": "100.0",
                          "item_index": null,
                          "name": "Drum sticks",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 1,
                          "sub_total": "100.0",
                          "taxes": [],
                          "uid": "xa081ynil58lkqm5",
                          "unit_amount": "100.0"
                        }
                      ],
                      "matter_uid": "1ei99zpv9sayyhnc",
                      "payment_request_uid": null,
                      "sub_total": "100.0",
                      "taxes": [],
                      "title": "Sale #1 - Drum sticks",
                      "total_price": null,
                      "uid": "huohc4fdomgl83gw",
                      "updated_at": "2025-08-05T09:54:45.240+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Cancel an open sale",
        "tags": [
          "Sales"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/carts/{uid}/cancel"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cancel_payment_statuses_items": {
                    "description": "Cancel the related activities under the sale",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/carts/{uid}/cart_completed": {
      "put": {
        "description": "Completes and finalizes the sale",
        "parameters": [
          {
            "description": "Sale UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "json": {
                      "message": "Cart completed successfully"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Complete an open sale",
        "tags": [
          "Sales"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/carts/{uid}/cart_completed"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/client_packages/{client_package_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "client_package_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client Package Info Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "client_package": {
                      "active": "true",
                      "amount": 100,
                      "booking_credits": [
                        {
                          "bookings_usage": "0",
                          "credit_items": [
                            {
                              "bookings_usage": 0,
                              "item_id": "mzuk2kkt7vjnxdwo",
                              "item_type": "SERVICE"
                            }
                          ],
                          "id": "vu1rovse0166a9d9",
                          "total_bookings": "10"
                        }
                      ],
                      "bookings_usage": "0",
                      "business_id": "vqzqruk6nyclxpp6",
                      "client_id": "9yxsdkr1hdjtocpv",
                      "conversation_id": "war7ow99zh14qlty",
                      "created_at": "2020-06-01T21:05:00.562Z",
                      "currency": "USD",
                      "id": "m73jkvg4bf2z71b2",
                      "image_path": "",
                      "name": "Music Lessons",
                      "package_id": "v2fvy50p8gjuvnvb",
                      "payment_request_id": "6v5ybwkavv0z9hff",
                      "payment_request_state": "pending",
                      "products": [
                        {
                          "id": "03nmq2uih783ro0g",
                          "name": "product1_name",
                          "quantity": 2
                        },
                        {
                          "id": "57ndq2uih503rca8",
                          "name": "product2_name",
                          "quantity": 4
                        }
                      ],
                      "source": {
                        "campaign": null,
                        "channel": "",
                        "name": "client_portal",
                        "website_url": null
                      },
                      "staff_id": "mg9d91uh92bclwzg",
                      "total_bookings": "10",
                      "valid_from": "2020-06-01",
                      "valid_until": "2020-07-01"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Show Client Package Info [Alpha]",
        "tags": [
          "Client Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.client_package_id": "method.request.path.client_package_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/client_packages/{client_package_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "client_package_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client Package Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "client_package": {
                      "active": "true",
                      "amount": 100,
                      "booking_credits": [
                        {
                          "bookings_usage": "0",
                          "credit_items": [
                            {
                              "bookings_usage": 0,
                              "item_id": "mzuk2kkt7vjnxdwo",
                              "item_type": "SERVICE"
                            }
                          ],
                          "id": "vu1rovse0166a9d9",
                          "total_bookings": "5"
                        }
                      ],
                      "bookings_usage": "0",
                      "business_id": "vqzqruk6nyclxpp6",
                      "client_id": "9yxsdkr1hdjtocpv",
                      "conversation_id": "war7ow99zh14qlty",
                      "created_at": "2020-06-01T21:05:00.562Z",
                      "currency": "USD",
                      "id": "m73jkvg4bf2z71b2",
                      "image_path": "",
                      "name": "Music Lessons",
                      "package_id": "v2fvy50p8gjuvnvb",
                      "payment_request_id": "6v5ybwkavv0z9hff",
                      "payment_request_state": "pending",
                      "products": [
                        {
                          "id": "03nmq2uih783ro0g",
                          "name": "product1_name",
                          "quantity": 2
                        },
                        {
                          "id": "57ndq2uih503rca8",
                          "name": "product2_name",
                          "quantity": 4
                        }
                      ],
                      "staff_id": "mg9d91uh92bclwzg",
                      "total_bookings": "5",
                      "valid_from": "2020-06-01",
                      "valid_until": "2021-07-01"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update client package [Alpha]",
        "tags": [
          "Client Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.client_package_id": "method.request.path.client_package_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/client_packages/{client_package_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "client_package": {
                    "properties": {
                      "booking_credits": {
                        "items": {
                          "properties": {
                            "id": {
                              "description": "Credit Item ID",
                              "type": "string"
                            },
                            "total_bookings": {
                              "description": "Total bookings for the provided booking credit. Must be equal or greater than the current booking credit usage.",
                              "type": "number"
                            }
                          },
                          "required": [
                            "total_bookings",
                            "id"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "valid_until": {
                        "description": "Last valid date of the client package (ISO 8601 format). Must be in the future and equal or greater than valid_from value.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "client_package"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/deposits": {
      "get": {
        "description": "Show list of deposits",
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by one of the following: created_at, updated_at. available operators: asc, desc. example: sort=created_at:asc,updated_at:desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Available filters: entity_uid, entity_type. example: filter[entity_uid][eq]=123&filter[entity_type][in]=Invoice.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "deposits": [
                      {
                        "amount": {
                          "is_rounded": null,
                          "total": 50,
                          "type": "fixed",
                          "value": 50
                        },
                        "can_client_pay": true,
                        "created_at": "2025-08-05T09:54:08.266+03:00",
                        "currency": "USD",
                        "entity_type": "Invoice",
                        "entity_uid": "ehxqtvabtig2aj06",
                        "matter_uid": "8ou4cwb8h5ipjlvt",
                        "payment_request_uid": null,
                        "payment_uid": "7zv99u0v4w36l3ru",
                        "staff_uid": "63dd60d2c4783ebe",
                        "title": "Deposit for INVOICE #0000001",
                        "uid": "pzbkn3h41ntc3c4u",
                        "updated_at": "2025-08-05T09:54:08.266+03:00"
                      }
                    ]
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Show Deposits List",
        "tags": [
          "Deposits"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/deposits"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "description": "Creates a Deposit",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "deposit": {
                      "amount": {
                        "is_rounded": null,
                        "total": 50,
                        "type": "fixed",
                        "value": 50
                      },
                      "can_client_pay": true,
                      "created_at": "2025-08-05T09:54:09.134+03:00",
                      "currency": "USD",
                      "entity_type": "Invoice",
                      "entity_uid": "1loujducpdk71p5r",
                      "matter_uid": "8ou4cwb8h5ipjlvt",
                      "payment_request_uid": null,
                      "payment_uid": "874tdqen0acd5t7f",
                      "staff_uid": "63dd60d2c4783ebe",
                      "title": "Deposit for INVOICE #0000002",
                      "uid": "m9k8akac0pu9h71v",
                      "updated_at": "2025-08-05T09:54:09.134+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Deposit",
        "tags": [
          "Deposits"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/deposits"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "deposit": {
                    "properties": {
                      "amount": {
                        "description": "Deposit's amount",
                        "items": {
                          "properties": {
                            "is_rounded": {
                              "description": "indicatation whether amount is rounded to the closest dollar",
                              "type": "boolean"
                            },
                            "total": {
                              "description": "amount total (fixed - after precentage calculation)",
                              "type": "number"
                            },
                            "type": {
                              "description": "amount type (fixed/precentage)",
                              "type": "string"
                            },
                            "value": {
                              "description": "amount value",
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "value",
                            "total"
                          ],
                          "type": "object"
                        },
                        "type": "object"
                      },
                      "can_client_pay": {
                        "description": "Indicates whether the payment will be made in Client Portal. Default is true",
                        "type": "boolean"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "entity_type": {
                        "description": "Related entity_type",
                        "type": "string"
                      },
                      "entity_uid": {
                        "description": "Related entity_uid",
                        "type": "string"
                      },
                      "matter_uid": {
                        "description": "Matter UID",
                        "type": "string"
                      },
                      "payment_uid": {
                        "description": "Related payment_uid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "currency",
                      "matter_uid",
                      "amount",
                      "entity_uid",
                      "entity_type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "deposit"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/deposits/{uid}": {
      "delete": {
        "description": "Delete a specific deposit",
        "parameters": [
          {
            "description": "Deposit UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete Deposit",
        "tags": [
          "Deposits"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/deposits/{uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "get": {
        "description": "Show specific deposit data",
        "parameters": [
          {
            "description": "Deposit UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "deposit": {
                      "amount": {
                        "is_rounded": null,
                        "total": 50,
                        "type": "fixed",
                        "value": 50
                      },
                      "can_client_pay": true,
                      "created_at": "2025-08-05T09:54:08.266+03:00",
                      "currency": "USD",
                      "entity_type": "Invoice",
                      "entity_uid": "ehxqtvabtig2aj06",
                      "matter_uid": "8ou4cwb8h5ipjlvt",
                      "payment_request_uid": null,
                      "payment_uid": "7zv99u0v4w36l3ru",
                      "staff_uid": "63dd60d2c4783ebe",
                      "title": "Deposit for INVOICE #0000001",
                      "uid": "pzbkn3h41ntc3c4u",
                      "updated_at": "2025-08-05T09:54:08.266+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Show Deposit",
        "tags": [
          "Deposits"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/deposits/{uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "Update specific deposit",
        "parameters": [
          {
            "description": "Deposit UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "deposit": {
                      "amount": {
                        "is_rounded": null,
                        "total": 50,
                        "type": "fixed",
                        "value": 50
                      },
                      "can_client_pay": true,
                      "created_at": "2025-08-05T09:54:08.266+03:00",
                      "currency": "USD",
                      "entity_type": "Invoice",
                      "entity_uid": "ehxqtvabtig2aj06",
                      "matter_uid": "8ou4cwb8h5ipjlvt",
                      "payment_request_uid": null,
                      "payment_uid": "7zv99u0v4w36l3ru",
                      "staff_uid": "63dd60d2c4783ebe",
                      "title": "Deposit for INVOICE #0000001",
                      "uid": "pzbkn3h41ntc3c4u",
                      "updated_at": "2025-08-05T09:54:08.266+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Deposit",
        "tags": [
          "Deposits"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/deposits/{uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "deposit": {
                    "properties": {
                      "amount": {
                        "description": "Deposit's amount",
                        "items": {
                          "properties": {
                            "is_rounded": {
                              "description": "indicatation whether amount is rounded to the closest dollar",
                              "type": "boolean"
                            },
                            "total": {
                              "description": "amount total (fixed - after precentage calculation)",
                              "type": "number"
                            },
                            "type": {
                              "description": "amount type (fixed/precentage)",
                              "type": "string"
                            },
                            "value": {
                              "description": "amount value",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "object"
                      },
                      "can_client_pay": {
                        "description": "Indicates whether the payment will be made in Client Portal. Default is true",
                        "type": "boolean"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "entity_type": {
                        "description": "Related entity_type",
                        "type": "string"
                      },
                      "entity_uid": {
                        "description": "Related entity_uid",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "deposit"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/estimates": {
      "post": {
        "description": "Creates an Estimate",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "estimate": {
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "The Best Barber Shop",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-09-05",
                      "estimate_label": "Estimate",
                      "estimate_number": 2,
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "currency": "USD",
                          "description": "Best Hair Conditioner",
                          "discount": {
                            "amount": "10.0",
                            "percent": "50.0"
                          },
                          "entity_type": null,
                          "entity_uid": null,
                          "grand_total": "10.0",
                          "item_index": 0,
                          "name": "Hair Conditioner",
                          "quantity": 2,
                          "sub_total": "10.0",
                          "taxes": [],
                          "uid": "p2nk17ytww78yobp",
                          "unit_amount": "10.0"
                        }
                      ],
                      "last_action": "2025-08-05T09:54:13.348+03:00",
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "tbfn3poiscu6sbdx",
                      "metadata": {
                        "display_items_total": false,
                        "display_sections_total": false,
                        "is_signature_required": null,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": "Thank you in advance!",
                      "purchase_order": null,
                      "sections": [
                        {
                          "items": [
                            {
                              "currency": "USD",
                              "description": "Best Hair Conditioner",
                              "discount": {
                                "amount": "10.0",
                                "percent": "50.0"
                              },
                              "entity_type": null,
                              "entity_uid": null,
                              "grand_total": "10.0",
                              "item_index": 0,
                              "name": "Hair Conditioner",
                              "quantity": 2,
                              "sub_total": "10.0",
                              "taxes": [],
                              "uid": "3bktizh6n28cg9b5",
                              "unit_amount": "10.0"
                            }
                          ],
                          "name": "Taylor Swift",
                          "section_index": 0,
                          "total_amount": "10.0",
                          "uid": "0xp61qwcq7zk9mt0"
                        }
                      ],
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": "Payment is due on the specified due date.",
                      "total": "20.0",
                      "total_tax": 0,
                      "uid": "q2mq3cdujuw2jcpt"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Estimate",
        "tags": [
          "Estimates"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/estimates"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "estimate": {
                    "properties": {
                      "billing_address": {
                        "description": "Business billing address",
                        "type": "string"
                      },
                      "business_name": {
                        "description": "The business name. Default value: The business name",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "display_items_total": {
                        "description": "Indicates wheter items total amounts should be displayed in the estimate. Default is true",
                        "type": "boolean"
                      },
                      "display_sections_total": {
                        "description": "Indicates wheter sections total amounts should be displayed in the estimate. Default is true",
                        "type": "boolean"
                      },
                      "due_date": {
                        "description": "The date when the estimate is due, in YYYY-MM-DD format (based on the timezone of the business), must be equal or greater than the estimate issue date",
                        "type": "string"
                      },
                      "estimate_label": {
                        "description": "The invoice label. Default value: ESTIMATE (in the business locale)",
                        "type": "string"
                      },
                      "estimate_number": {
                        "description": "A unique estimate number. Default value: last estimate number increment by 1",
                        "type": "number"
                      },
                      "is_signature_required": {
                        "description": "Indicates whether signature is required for the specific estimate",
                        "type": "boolean"
                      },
                      "issue_date": {
                        "description": "Estimate date, in YYYY-MM-DD format (based on the timezone of the business)",
                        "type": "string"
                      },
                      "items": {
                        "description": "An array of estimate item information. At least one item is required (unless sections provided).",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "The item description",
                              "type": "string"
                            },
                            "discount": {
                              "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                              "properties": {
                                "amount": {
                                  "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                  "type": "number"
                                },
                                "percent": {
                                  "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "entity_type": {
                              "description": "Possible values: Service / Product / BookingPackage",
                              "type": "string"
                            },
                            "entity_uid": {
                              "description": "The UID of the entity",
                              "type": "string"
                            },
                            "item_index": {
                              "description": "the order of the item in the section / estimate (if not inside a section)",
                              "type": "number"
                            },
                            "name": {
                              "description": "The item name",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "The quantity of the item, must be greater than 0.",
                              "type": "number"
                            },
                            "tax_uids": {
                              "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "unit_amount": {
                              "description": "The unit amount of the item",
                              "type": "number"
                            }
                          },
                          "required": [
                            "name",
                            "quantity",
                            "unit_amount"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "matter_uid": {
                        "description": "Matter UID",
                        "type": "string"
                      },
                      "note": {
                        "description": "A note for the invoice recipient",
                        "type": "string"
                      },
                      "notify_recipient": {
                        "description": "Indicates whether to send the estimate to the recipient. This can be set only on ISSUED estimate. Default value: true",
                        "type": "boolean"
                      },
                      "purchase_order": {
                        "description": "Purchase Order",
                        "type": "string"
                      },
                      "sections": {
                        "description": "An array of estimate sections information. requires if not general items provided.",
                        "items": {
                          "properties": {
                            "items": {
                              "description": "An array of estimate item information. At least one item is required (unless sections provided).",
                              "items": {
                                "properties": {
                                  "description": {
                                    "description": "The item description",
                                    "type": "string"
                                  },
                                  "discount": {
                                    "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                                    "properties": {
                                      "amount": {
                                        "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                        "type": "number"
                                      },
                                      "percent": {
                                        "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "entity_type": {
                                    "description": "Possible values: Service / Product / BookingPackage",
                                    "type": "string"
                                  },
                                  "entity_uid": {
                                    "description": "The UID of the entity",
                                    "type": "string"
                                  },
                                  "item_index": {
                                    "description": "the order of the item in the section / estimate (if not inside a section)",
                                    "type": "number"
                                  },
                                  "name": {
                                    "description": "The item name",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "The quantity of the item, must be greater than 0.",
                                    "type": "number"
                                  },
                                  "tax_uids": {
                                    "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "unit_amount": {
                                    "description": "The unit amount of the item",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "name",
                                  "quantity",
                                  "unit_amount",
                                  "item_index"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "The section name",
                              "type": "string"
                            },
                            "section_index": {
                              "description": "the order of the section among all sections",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "section_index"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "source_campaign": {
                        "description": "Source Campaign",
                        "type": "string"
                      },
                      "source_channel": {
                        "description": "Source Channel",
                        "type": "string"
                      },
                      "source_name": {
                        "description": "Source Name",
                        "type": "string"
                      },
                      "source_url": {
                        "description": "Source Url",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status of the estimate. The possible values are: DRAFT / ISSUED. Default value: ISSUED",
                        "type": "string"
                      },
                      "terms_and_conditions": {
                        "description": "The terms and conditions of the estimate",
                        "type": "string"
                      }
                    },
                    "required": [
                      "matter_uid",
                      "issue_date",
                      "due_date",
                      "currency",
                      "billing_address",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "estimate"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/estimates/{estimate_uid}": {
      "get": {
        "description": "fetch a specific estimate",
        "parameters": [
          {
            "description": "Estimate UID",
            "in": "path",
            "name": "estimate_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "estimate": {
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "businesse980f4492b535cb7",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-08-05",
                      "estimate_label": "Estimate",
                      "estimate_number": 1,
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "grand_total": "20.0",
                          "item_index": null,
                          "name": "Hair Conditioner",
                          "quantity": 2,
                          "sub_total": "20.0",
                          "taxes": [],
                          "uid": "azuv5w1obgam63xo",
                          "unit_amount": "10.0"
                        }
                      ],
                      "last_action": "2025-08-05T09:54:11.331+03:00",
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "tbfn3poiscu6sbdx",
                      "metadata": {
                        "display_items_total": true,
                        "display_sections_total": true,
                        "is_signature_required": null,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": null,
                      "purchase_order": null,
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": null,
                      "total": "20.0",
                      "total_tax": 0,
                      "uid": "tbzc47bc1cyfrg0x"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Estimate",
        "tags": [
          "Estimates"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/estimates/{estimate_uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "update an existing estimate",
        "parameters": [
          {
            "description": "Estimate UID",
            "in": "path",
            "name": "estimate_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "estimate": {
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "businesse980f4492b535cb7",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-08-05",
                      "estimate_label": "Estimate",
                      "estimate_number": 1,
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "grand_total": "20.0",
                          "item_index": null,
                          "name": "Hair Conditioner",
                          "quantity": 2,
                          "sub_total": "20.0",
                          "taxes": [],
                          "uid": "azuv5w1obgam63xo",
                          "unit_amount": "10.0"
                        }
                      ],
                      "last_action": "2025-08-05T09:54:11.331+03:00",
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "tbfn3poiscu6sbdx",
                      "metadata": {
                        "display_items_total": true,
                        "display_sections_total": true,
                        "is_signature_required": null,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": null,
                      "purchase_order": null,
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": null,
                      "total": "20.0",
                      "total_tax": 0,
                      "uid": "tbzc47bc1cyfrg0x"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "update",
        "tags": [
          "Estimates"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/estimates/{estimate_uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "estimate": {
                    "properties": {
                      "billing_address": {
                        "description": "Business billing address",
                        "type": "string"
                      },
                      "business_name": {
                        "description": "The business name",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "display_items_total": {
                        "description": "Indicates wheter items total amounts should be displayed in the estimate. Default is true",
                        "type": "boolean"
                      },
                      "display_sections_total": {
                        "description": "Indicates wheter sections total amounts should be displayed in the estimate. Default is true",
                        "type": "boolean"
                      },
                      "due_date": {
                        "description": "The date when the estimate is due, in YYYY-MM-DD format (based on the timezone of the business), must be equal or greater than the estimate issue date",
                        "type": "string"
                      },
                      "estimate_label": {
                        "description": "The estimate label",
                        "type": "string"
                      },
                      "estimate_number": {
                        "description": "A unique estimate number",
                        "type": "number"
                      },
                      "is_signature_required": {
                        "description": "Indicates whether signature is required for the specific estimate",
                        "type": "boolean"
                      },
                      "issue_date": {
                        "description": "Estimate date, in YYYY-MM-DD format (based on the timezone of the business)",
                        "type": "string"
                      },
                      "items": {
                        "description": "An array of estimate item information. At least one item is required. All estimate items will be replaced with the provided items. Exisitng item that won't be provided will be removed.",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "The item description",
                              "type": "string"
                            },
                            "discount": {
                              "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                              "properties": {
                                "amount": {
                                  "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                  "type": "number"
                                },
                                "percent": {
                                  "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "entity_type": {
                              "description": "Possible values: Service / Product / BookingPackage",
                              "type": "string"
                            },
                            "entity_uid": {
                              "description": "The UID of the entity",
                              "type": "string"
                            },
                            "item_index": {
                              "description": "the order of the item in the section / estimate (if not inside a section)",
                              "type": "number"
                            },
                            "name": {
                              "description": "The item name",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "The quantity of the item, must be greater than 0.",
                              "type": "number"
                            },
                            "tax_uids": {
                              "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "unit_amount": {
                              "description": "The unit amount of the item",
                              "type": "number"
                            }
                          },
                          "required": [
                            "name",
                            "quantity",
                            "unit_amount"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "description": "A note for the invoice recipient",
                        "type": "string"
                      },
                      "notify_recipient": {
                        "description": "Indicates whether to send the estimate to the recipient. This can be set only on ISSUED estimate. Default value: true",
                        "type": "boolean"
                      },
                      "purchase_order": {
                        "description": "Purchase Order",
                        "type": "string"
                      },
                      "sections": {
                        "description": "An array of estimate sections information. requires if not general items provided.",
                        "items": {
                          "properties": {
                            "items": {
                              "description": "An array of estimate item information. At least one item is required (unless sections provided).",
                              "items": {
                                "properties": {
                                  "description": {
                                    "description": "The item description",
                                    "type": "string"
                                  },
                                  "discount": {
                                    "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                                    "properties": {
                                      "amount": {
                                        "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                        "type": "number"
                                      },
                                      "percent": {
                                        "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "entity_type": {
                                    "description": "Possible values: Service / Product / BookingPackage",
                                    "type": "string"
                                  },
                                  "entity_uid": {
                                    "description": "The UID of the entity",
                                    "type": "string"
                                  },
                                  "item_index": {
                                    "description": "the order of the item in the section / estimate (if not inside a section)",
                                    "type": "number"
                                  },
                                  "name": {
                                    "description": "The item name",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "The quantity of the item, must be greater than 0.",
                                    "type": "number"
                                  },
                                  "tax_uids": {
                                    "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "unit_amount": {
                                    "description": "The unit amount of the item",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "name",
                                  "quantity",
                                  "unit_amount",
                                  "item_index"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "The section name",
                              "type": "string"
                            },
                            "section_index": {
                              "description": "the order of the section among all sections",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "section_index"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the estimate. The possible values are: DRAFT / ISSUED / APPROVED / REJECTED.",
                        "type": "string"
                      },
                      "terms_and_conditions": {
                        "description": "The terms and conditions of the estimate",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "estimate"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/invoices": {
      "post": {
        "description": "Creates an Invoice",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "additional_recipients": [],
                      "allow_online_payment": false,
                      "allow_partial_payment": false,
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "The Best Barber Shop",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-09-05",
                      "invoice_label": "INVOICE",
                      "invoice_number": "2",
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": "Best Hair Conditioner",
                          "discount": {
                            "amount": "10.0",
                            "percent": "50.0"
                          },
                          "entity_name": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "fee_type": null,
                          "grand_total": "10.0",
                          "item_index": 0,
                          "name": "Hair Conditioner",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 2,
                          "sub_total": "10.0",
                          "taxes": [],
                          "uid": "t7xz0abgv9ip9h6n",
                          "unit_amount": "10.0"
                        }
                      ],
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "xdnlwly0alkhctsx",
                      "metadata": {
                        "display_items_total": false,
                        "display_sections_total": false,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": "Thank you in advance!",
                      "payment_status_uid": "dmzu2spv4mcojatz",
                      "purchase_order": null,
                      "sections": [
                        {
                          "items": [
                            {
                              "cost": null,
                              "currency": "USD",
                              "description": "Best Hair Conditioner",
                              "discount": {
                                "amount": "10.0",
                                "percent": "50.0"
                              },
                              "entity_name": null,
                              "entity_type": null,
                              "entity_uid": null,
                              "fee_type": null,
                              "grand_total": "10.0",
                              "item_index": 0,
                              "name": "Hair Conditioner",
                              "orig_taxes": [],
                              "partial_payments_amount": "0.0",
                              "quantity": 2,
                              "sub_total": "10.0",
                              "taxes": [],
                              "uid": "ktahe298wvsgzzm7",
                              "unit_amount": "10.0"
                            }
                          ],
                          "name": "Taylor Swift",
                          "section_index": 0,
                          "total_amount": "10.0",
                          "uid": "yyl0mlay0kf357hb"
                        }
                      ],
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": "Payment is due on the specified due date.",
                      "total": 20,
                      "total_tax": 0,
                      "uid": "a410b2fhs8wwwxpk"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Invoice",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/invoices"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "invoice": {
                    "properties": {
                      "additional_recipients": {
                        "description": "An array of email addresses of additional recipients to notify",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "allow_online_payment": {
                        "description": "Indicates whether an online payment is allowed for this invoice. This can be set for business with online payment enabled and when connected to a payment gateway. Default value: true when connected to a payment gateway and online payment is enabled for the business.",
                        "type": "boolean"
                      },
                      "allow_partial_payment": {
                        "description": "Indicates whether a partial payment is allowed for this invoice. This can be set when online payment is allowed for the invoice. Default value: true when online payment allowed for the invoice and partial payment is enabled for the business.",
                        "type": "boolean"
                      },
                      "billing_address": {
                        "description": "Business billing address",
                        "type": "string"
                      },
                      "business_name": {
                        "description": "The business name. Default value: The business name",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "display_items_total": {
                        "description": "Indicates wheter items total amounts should be displayed in the invoice. Default is true",
                        "type": "boolean"
                      },
                      "display_sections_total": {
                        "description": "Indicates wheter sections total amounts should be displayed in the invoice. Default is true",
                        "type": "boolean"
                      },
                      "due_date": {
                        "description": "The date when the invoice payment is due, in YYYY-MM-DD format (based on the timezone of the business), must be equal or greater than the invoice issue date",
                        "type": "string"
                      },
                      "from_estimate_uid": {
                        "description": "The UID of the estimate from which the invoice was created.",
                        "type": "string"
                      },
                      "invoice_label": {
                        "description": "The invoice label. Default value: INVOICE (in the business locale)",
                        "type": "string"
                      },
                      "invoice_number": {
                        "description": "A unique invoice number. Default value: last invoice number increment by 1",
                        "type": "number"
                      },
                      "issue_date": {
                        "description": "Invoice date, in YYYY-MM-DD format (based on the timezone of the business)",
                        "type": "string"
                      },
                      "items": {
                        "description": "An array of invoice item information. At least one item is required (unless sections provided).",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "The item description",
                              "type": "string"
                            },
                            "discount": {
                              "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                              "properties": {
                                "amount": {
                                  "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                  "type": "number"
                                },
                                "percent": {
                                  "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "entity_type": {
                              "description": "Possible values: Service / Product / BookingPackage /  Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                              "type": "string"
                            },
                            "entity_uid": {
                              "description": "The UID of the entity",
                              "type": "string"
                            },
                            "item_index": {
                              "description": "the order of the item in the section / invoice (if not inside a section)",
                              "type": "number"
                            },
                            "name": {
                              "description": "The item name",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "The quantity of the item, must be greater than 0. The quantity of an item with one of the following entity types must be 1: Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                              "type": "number"
                            },
                            "tax_uids": {
                              "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "unit_amount": {
                              "description": "The unit amount of the item",
                              "type": "number"
                            }
                          },
                          "required": [
                            "name",
                            "quantity",
                            "unit_amount"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "matter_uid": {
                        "description": "Matter UID",
                        "type": "string"
                      },
                      "note": {
                        "description": "A note for the invoice recipient",
                        "type": "string"
                      },
                      "notify_recipient": {
                        "description": "Indicates whether to send the invoice to the recipient. This can be set only on ISSUED invoice. Default value: true",
                        "type": "boolean"
                      },
                      "purchase_order": {
                        "description": "Purchase Order",
                        "type": "string"
                      },
                      "sections": {
                        "description": "An array of invoice sections information. requires if not general items provided.",
                        "items": {
                          "properties": {
                            "items": {
                              "description": "An array of invoice item information. At least one item is required (unless sections provided).",
                              "items": {
                                "properties": {
                                  "description": {
                                    "description": "The item description",
                                    "type": "string"
                                  },
                                  "discount": {
                                    "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                                    "properties": {
                                      "amount": {
                                        "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                        "type": "number"
                                      },
                                      "percent": {
                                        "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "entity_type": {
                                    "description": "Possible values: Service / Product / BookingPackage /  Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                                    "type": "string"
                                  },
                                  "entity_uid": {
                                    "description": "The UID of the entity",
                                    "type": "string"
                                  },
                                  "item_index": {
                                    "description": "the order of the item in the section / invoice (if not inside a section)",
                                    "type": "number"
                                  },
                                  "name": {
                                    "description": "The item name",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "The quantity of the item, must be greater than 0. The quantity of an item with one of the following entity types must be 1: Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                                    "type": "number"
                                  },
                                  "tax_uids": {
                                    "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "unit_amount": {
                                    "description": "The unit amount of the item",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "name",
                                  "quantity",
                                  "unit_amount",
                                  "item_index"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "The section name",
                              "type": "string"
                            },
                            "section_index": {
                              "description": "the order of the section among all sections",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "section_index"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "source_campaign": {
                        "description": "Source Campaign",
                        "type": "string"
                      },
                      "source_channel": {
                        "description": "Source Channel",
                        "type": "string"
                      },
                      "source_name": {
                        "description": "Source Name",
                        "type": "string"
                      },
                      "source_url": {
                        "description": "Source Url",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status of the invoice. The possible values are: DRAFT / ISSUED. Default value: ISSUED",
                        "type": "string"
                      },
                      "terms_and_conditions": {
                        "description": "The terms and conditions of the invoice",
                        "type": "string"
                      }
                    },
                    "required": [
                      "matter_uid",
                      "issue_date",
                      "due_date",
                      "currency",
                      "billing_address",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "invoice"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{invoice_uid}": {
      "get": {
        "description": "fetch a specific invoice",
        "parameters": [
          {
            "description": "Invoice UID",
            "in": "path",
            "name": "invoice_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "additional_recipients": [],
                      "allow_online_payment": false,
                      "allow_partial_payment": false,
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "businessbef050d548878525",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-08-05",
                      "invoice_label": "INVOICE",
                      "invoice_number": "1",
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_name": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "fee_type": null,
                          "grand_total": "20.0",
                          "item_index": null,
                          "name": "Hair Conditioner",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 2,
                          "sub_total": "20.0",
                          "taxes": [],
                          "uid": "hgfrb6a3zoat965y",
                          "unit_amount": "10.0"
                        }
                      ],
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "xdnlwly0alkhctsx",
                      "metadata": {
                        "display_items_total": true,
                        "display_sections_total": true,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": null,
                      "payment_status_uid": "lqg45ygzykxilgqd",
                      "purchase_order": null,
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": null,
                      "total": 20,
                      "total_tax": 0,
                      "uid": "59ny6pi00qjyww82"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Invoice",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/invoices/{invoice_uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "update an existing invoice",
        "parameters": [
          {
            "description": "Invoice UID",
            "in": "path",
            "name": "invoice_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "additional_recipients": [],
                      "allow_online_payment": false,
                      "allow_partial_payment": false,
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "businessbef050d548878525",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-08-05",
                      "invoice_label": "INVOICE",
                      "invoice_number": "1",
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_name": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "fee_type": null,
                          "grand_total": "20.0",
                          "item_index": null,
                          "name": "Hair Conditioner",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 2,
                          "sub_total": "20.0",
                          "taxes": [],
                          "uid": "hgfrb6a3zoat965y",
                          "unit_amount": "10.0"
                        }
                      ],
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "xdnlwly0alkhctsx",
                      "metadata": {
                        "display_items_total": true,
                        "display_sections_total": true,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": null,
                      "payment_status_uid": "lqg45ygzykxilgqd",
                      "purchase_order": null,
                      "status": "ISSUED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": null,
                      "total": 20,
                      "total_tax": 0,
                      "uid": "59ny6pi00qjyww82"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "update",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/invoices/{invoice_uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "invoice": {
                    "properties": {
                      "additional_recipients": {
                        "description": "An array of email addresses of additional recipients to notify",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "allow_online_payment": {
                        "description": "translation missing: en.payments-api.business.invoices.create.update.allow_online_payment",
                        "type": "boolean"
                      },
                      "allow_partial_payment": {
                        "description": "translation missing: en.payments-api.business.invoices.create.update.allow_partial_payment",
                        "type": "boolean"
                      },
                      "billing_address": {
                        "description": "Business billing address",
                        "type": "string"
                      },
                      "business_name": {
                        "description": "The business name",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "display_items_total": {
                        "description": "Indicates wheter items total amounts should be displayed in the invoice. Default is true",
                        "type": "boolean"
                      },
                      "display_sections_total": {
                        "description": "Indicates wheter sections total amounts should be displayed in the invoice. Default is true",
                        "type": "boolean"
                      },
                      "due_date": {
                        "description": "The date when the invoice payment is due, in YYYY-MM-DD format (based on the timezone of the business), must be equal or greater than the invoice issue date",
                        "type": "string"
                      },
                      "invoice_label": {
                        "description": "The invoice label",
                        "type": "string"
                      },
                      "invoice_number": {
                        "description": "A unique invoice number",
                        "type": "number"
                      },
                      "issue_date": {
                        "description": "Invoice date, in YYYY-MM-DD format (based on the timezone of the business)",
                        "type": "string"
                      },
                      "items": {
                        "description": "An array of invoice item information. At least one item is required. All invoice items will be replaced with the provided items. Exisitng item that won't be provided will be removed.",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "The item description",
                              "type": "string"
                            },
                            "discount": {
                              "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                              "properties": {
                                "amount": {
                                  "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                  "type": "number"
                                },
                                "percent": {
                                  "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "entity_type": {
                              "description": "Possible values: Service / Product / BookingPackage /  Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                              "type": "string"
                            },
                            "entity_uid": {
                              "description": "The UID of the entity",
                              "type": "string"
                            },
                            "name": {
                              "description": "The item name",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "The quantity of the item, must be greater than 0. The quantity of an item with one of the following entity types must be 1: Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                              "type": "number"
                            },
                            "tax_uids": {
                              "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "uid": {
                              "description": "The item UID. Provide when updating an existing item.",
                              "type": "string"
                            },
                            "unit_amount": {
                              "description": "The unit amount of the item",
                              "type": "number"
                            }
                          },
                          "required": [
                            "name",
                            "quantity",
                            "unit_amount"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "description": "A note for the invoice recipient",
                        "type": "string"
                      },
                      "notify_recipient": {
                        "description": "Indicates whether to send the invoice to the recipient. This can be set only on ISSUED invoice. Default value: true",
                        "type": "boolean"
                      },
                      "purchase_order": {
                        "description": "Purchase Order",
                        "type": "string"
                      },
                      "sections": {
                        "description": "An array of invoice sections information. requires if not general items provided.",
                        "items": {
                          "properties": {
                            "items": {
                              "description": "An array of invoice item information. At least one item is required (unless sections provided).",
                              "items": {
                                "properties": {
                                  "description": {
                                    "description": "The item description",
                                    "type": "string"
                                  },
                                  "discount": {
                                    "description": "Discount as a percent or amount. The discount amount is subtracted from the item total.",
                                    "properties": {
                                      "amount": {
                                        "description": "Discount amount being applied to an item. Valus must be greater than 0.",
                                        "type": "number"
                                      },
                                      "percent": {
                                        "description": "Percentage discount being applied to an item. Value must be greater than 0 and less than or equal to 100.",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "entity_type": {
                                    "description": "Possible values: Service / Product / BookingPackage /  Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                                    "type": "string"
                                  },
                                  "entity_uid": {
                                    "description": "The UID of the entity",
                                    "type": "string"
                                  },
                                  "item_index": {
                                    "description": "the order of the item in the section / invoice (if not inside a section)",
                                    "type": "number"
                                  },
                                  "name": {
                                    "description": "The item name",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "The quantity of the item, must be greater than 0. The quantity of an item with one of the following entity types must be 1: Meeting / EventAttendance / ProductOrder / ClientBookingPackage",
                                    "type": "number"
                                  },
                                  "tax_uids": {
                                    "description": "An array of tax UIDs applied to an item. Up to 3 taxes per item are allowed.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "unit_amount": {
                                    "description": "The unit amount of the item",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "name",
                                  "quantity",
                                  "unit_amount",
                                  "item_index"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "The section name",
                              "type": "string"
                            },
                            "section_index": {
                              "description": "the order of the section among all sections",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "section_index"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the invoice. The possible values are: DRAFT / ISSUED.",
                        "type": "string"
                      },
                      "terms_and_conditions": {
                        "description": "The terms and conditions of the invoice",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "invoice"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{invoice_uid}/cancel": {
      "put": {
        "description": "Cancels an Invoice",
        "parameters": [
          {
            "description": "Invoice UID",
            "in": "path",
            "name": "invoice_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "invoice": {
                      "additional_recipients": [],
                      "allow_online_payment": false,
                      "allow_partial_payment": false,
                      "billing_address": "1 Bay St, San Francisco, CA, United States",
                      "business_name": "businessbef050d548878525",
                      "client_name": "First name",
                      "contact_details": null,
                      "currency": "USD",
                      "due_date": "2025-08-05",
                      "invoice_label": "INVOICE",
                      "invoice_number": "1",
                      "issue_date": "2025-08-05",
                      "items": [
                        {
                          "cost": null,
                          "currency": "USD",
                          "description": null,
                          "discount": null,
                          "entity_name": null,
                          "entity_type": null,
                          "entity_uid": null,
                          "fee_type": null,
                          "grand_total": "20.0",
                          "item_index": null,
                          "name": "Hair Conditioner",
                          "orig_taxes": [],
                          "partial_payments_amount": "0.0",
                          "quantity": 2,
                          "sub_total": "20.0",
                          "taxes": [],
                          "uid": "hgfrb6a3zoat965y",
                          "unit_amount": "10.0"
                        }
                      ],
                      "matter_details": null,
                      "matter_name": "First name",
                      "matter_term": "Client",
                      "matter_uid": "xdnlwly0alkhctsx",
                      "metadata": {
                        "display_items_total": true,
                        "display_sections_total": true,
                        "pdf_customization": {
                          "color": null,
                          "cover": null,
                          "logo_size": null,
                          "template": null
                        },
                        "tax_mode": "exclude"
                      },
                      "note": null,
                      "payment_status_uid": "lqg45ygzykxilgqd",
                      "purchase_order": null,
                      "status": "CANCELLED",
                      "subtotal": "20.0",
                      "taxes": [],
                      "terms_and_conditions": null,
                      "total": 20,
                      "total_tax": 0,
                      "uid": "59ny6pi00qjyww82"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Cancel Invoice",
        "tags": [
          "Invoices"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/invoices/{invoice_uid}/cancel"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "unlink_activities": {
                    "description": "Define whether assocaited activities should be canceled of not. If true, assoicated activited will not be canceled and will be unlinked from the invoice. Otherwise, associated activities will remain attached to the invoice and get canceled.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/packages/reorder": {
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Packages Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Reorder packages [Alpha]",
        "tags": [
          "Packages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/packages/order"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "packages": {
                    "items": {
                      "properties": {
                        "id": {
                          "description": "Package ID",
                          "type": "string"
                        },
                        "order": {
                          "description": "The position of the package in the packages list.",
                          "type": "number"
                        }
                      },
                      "required": [
                        "order",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/payment_requests": {
      "get": {
        "description": "GET Payment Requests List",
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by one of the following: created_at, updated_at, due_date, state, entity_type.  available operators: asc, desc. example: sort=created_at:asc,updated_at:desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Available filters: client_uid: filter[client_uid][eq]=123. \n                                                                                           matter_uid: filter[matter_uid][eq]=123.\n                                                                                           state: filter[state][in]=DUE/OVERDUE/NOT_YET_DUE/PAID/CANCELLED. \n                                                                                           created_at: filter[created_at][eq/lt/lte/gt/gte]=2019-01-01.\n                                                                                           updated_at: filter[updated_at][eq/lt/lte/gt/gte]=2019-01-01.\n                                                                                           due_date: filter[due_date][eq/lt/lte/gt/gte]=2019-01-01.\n                                                                                           entity_type: filter[entity_type][in]=Cart,Invoice,Meeting,EventAttendance,ProductOrder,ClientBookingPackage,Payou,PendingBooking,PendingClientBookingPackage.\n                                                                                           entity_uid: allowed only with one matching entity_type. for example: filter[entity_uid][eq]=123&filter[entity_type][in]=Meeting\n                                                                                           amount_pending: filter[amount_pending][eq/lt/lte/gt/gte]=100.\n                                                                                           amount_paid: filter[amount_paid][eq/lt/lte/gt/gte]=100.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_requests": [
                      {
                        "amount": "100.0",
                        "amount_before_coupon": null,
                        "amount_paid": 0,
                        "amount_pending": null,
                        "created_at": "2025-08-05T09:54:24.230+03:00",
                        "currency": "USD",
                        "display": true,
                        "due_date": "2025-08-05T00:00:00.000+03:00",
                        "fees_amount": 0,
                        "matter_uid": "jhtunvqcadvvqiwu",
                        "net_amount": "100.0",
                        "paid_at": null,
                        "pait_at": null,
                        "payable_type": "ProductOrder",
                        "payable_uid": "667yhdpqpielqq7s",
                        "sellable_name": "Shampoo",
                        "staff_uid": "05a2a75fc9b4f022",
                        "state": "pending",
                        "tax_mode": "exclude",
                        "taxes": [],
                        "tips_amount": 0,
                        "uid": "05ivcq2c5o62vebm",
                        "updated_at": "2025-08-05T09:54:24.230+03:00"
                      }
                    ]
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "GET Payment Requests List",
        "tags": [
          "Payment Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payment_requests"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/payment_requests/{payment_request_id}/send_link": {
      "post": {
        "description": "Send payment request link",
        "parameters": [
          {
            "description": "Payment Request UID",
            "in": "path",
            "name": "payment_request_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Send payment request link",
        "tags": [
          "Payment Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payment_requests/{payment_request_id}/send_link"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "description": "Email or sms.",
                    "type": "string"
                  }
                },
                "required": [
                  "channel"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/payment_requests/{payment_request_uid}": {
      "get": {
        "description": "GET Payment Request",
        "parameters": [
          {
            "description": "Payment Request UID",
            "in": "path",
            "name": "payment_request_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_request": {
                      "amount": "100.0",
                      "amount_before_coupon": null,
                      "amount_paid": 0,
                      "amount_pending": null,
                      "created_at": "2025-08-05T09:54:24.230+03:00",
                      "currency": "USD",
                      "display": true,
                      "due_date": "2025-08-05T00:00:00.000+03:00",
                      "fees_amount": 0,
                      "matter_uid": "jhtunvqcadvvqiwu",
                      "net_amount": "100.0",
                      "paid_at": null,
                      "pait_at": null,
                      "payable_type": "ProductOrder",
                      "payable_uid": "667yhdpqpielqq7s",
                      "sellable_name": "Shampoo",
                      "staff_uid": "05a2a75fc9b4f022",
                      "state": "pending",
                      "tax_mode": "exclude",
                      "taxes": [],
                      "tips_amount": 0,
                      "uid": "05ivcq2c5o62vebm",
                      "updated_at": "2025-08-05T09:54:24.230+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "GET Payment Request",
        "tags": [
          "Payment Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payment_requests/{payment_request_uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "update an existing payment request",
        "parameters": [
          {
            "description": "Payment request uid",
            "in": "path",
            "name": "payment_request_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment_request": {
                      "amount": "100.0",
                      "amount_before_coupon": null,
                      "amount_paid": 0,
                      "amount_pending": null,
                      "created_at": "2025-08-05T09:54:24.230+03:00",
                      "currency": "USD",
                      "display": true,
                      "due_date": "2025-08-05T00:00:00.000+03:00",
                      "fees_amount": 0,
                      "matter_uid": "jhtunvqcadvvqiwu",
                      "net_amount": "100.0",
                      "paid_at": null,
                      "pait_at": null,
                      "payable_type": "ProductOrder",
                      "sellable_name": "Shampoo",
                      "staff_uid": "05a2a75fc9b4f022",
                      "state": "pending",
                      "tax_mode": "exclude",
                      "taxes": [],
                      "tips_amount": 0,
                      "uid": "05ivcq2c5o62vebm",
                      "updated_at": "2025-08-05T09:54:24.230+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "update",
        "tags": [
          "Payment Requests"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payment_requests/{payment_request_uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_request": {
                    "properties": {
                      "currency": {
                        "description": "The currency of the payment request",
                        "type": "string"
                      },
                      "net_price": {
                        "description": "net price of the payment request",
                        "type": "number"
                      },
                      "price": {
                        "description": "total price of the payment request",
                        "type": "number"
                      },
                      "price_before_coupon": {
                        "description": "The price before coupon. if the payment request contain taxes, then this field value is depended on the tax_mode. if taxes are included inside the value, then the price_before_coupon value should include taxes. otherwise, it should not include taxes.",
                        "type": "number"
                      },
                      "tax_uids": {
                        "description": "Array of tax_uids (strings)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "payment_request"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/payments": {
      "get": {
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payments Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "payments": [
                        {
                          "amount": 550,
                          "business_uid": "6bms9hebq9uv6ptm",
                          "created_at": "2023-03-29T17:07:11Z",
                          "currency": "ILS",
                          "marked_as_online": false,
                          "matter_uid": "aso2xnyeg1zytb4w",
                          "net_total": 500,
                          "other_payment_method": null,
                          "paid_online": false,
                          "payment_method": "Cash",
                          "payment_request_uid": "oic742ep8r7oxkl5",
                          "payment_time": "2023-03-29T17:06:59Z",
                          "provider_state": null,
                          "provider_transaction_id": null,
                          "reference": null,
                          "state": "paid",
                          "taxes": [
                            {
                              "name": "TTT",
                              "rate": 10,
                              "tax_total": 50
                            }
                          ],
                          "title": "INVOICE #0000011",
                          "uid": "49trm2x2vj43gita",
                          "updated_at": "2023-03-29T17:07:13Z"
                        }
                      ]
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "missing",
                      "message": "Not Found"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "List Payments",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payments"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/payments/{payment_uid}": {
      "get": {
        "parameters": [
          {
            "description": "payment id",
            "in": "path",
            "name": "payment_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment found",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "payment": {
                        "amount": 550,
                        "business_uid": "6bms9hebq9uv6ptm",
                        "created_at": "2023-03-29T17:07:11Z",
                        "currency": "ILS",
                        "marked_as_online": false,
                        "matter_uid": "aso2xnyeg1zytb4w",
                        "net_total": 500,
                        "other_payment_method": null,
                        "paid_online": false,
                        "payment_method": "Cash",
                        "payment_request_uid": "oic742ep8r7oxkl5",
                        "payment_time": "2023-03-29T17:06:59Z",
                        "provider_state": null,
                        "provider_transaction_id": null,
                        "reference": null,
                        "state": "paid",
                        "taxes": [
                          {
                            "name": "TTT",
                            "rate": 10,
                            "tax_total": 50
                          }
                        ],
                        "title": "INVOICE #0000011",
                        "uid": "49trm2x2vj43gita",
                        "updated_at": "2023-03-29T17:07:13Z"
                      }
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "missing",
                      "field": "payment_uid",
                      "message": "Not Found"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Payment",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.payment_uid": "method.request.path.payment_uid"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payments/{payment_uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "parameters": [
          {
            "description": "If the payment's internal uid is known, use it. Otherwise, set it to be the transaction_id and set use_external_id to be true",
            "in": "path",
            "name": "payment_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payment": {
                      "amount": 550,
                      "business_uid": "6bms9hebq9uv6ptm",
                      "created_at": "2023-03-29T17:07:11Z",
                      "currency": "ILS",
                      "marked_as_online": false,
                      "matter_uid": "aso2xnyeg1zytb4w",
                      "net_total": 500,
                      "other_payment_method": null,
                      "paid_online": false,
                      "payment_method": "Cash",
                      "payment_request_uid": "oic742ep8r7oxkl5",
                      "payment_time": "2023-03-29T17:06:59Z",
                      "provider_state": null,
                      "provider_transaction_id": "m73jkvg4bf2z71b2",
                      "reference": null,
                      "state": "paid",
                      "taxes": [
                        {
                          "name": "TTT",
                          "rate": 10,
                          "tax_total": 50
                        }
                      ],
                      "title": "INVOICE #0000011",
                      "uid": "49trm2x2vj43gita",
                      "updated_at": "2023-03-29T17:07:13Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Payment",
        "tags": [
          "Payments"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.payment_uid": "method.request.path.payment_uid"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payments/{payment_uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment": {
                    "properties": {
                      "error_data": {
                        "properties": {
                          "message": {
                            "description": "Error message for a failed payment",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "provider_state": {
                        "description": "Custom state set by gateway provider",
                        "type": "string"
                      },
                      "state": {
                        "description": "The updated state of a payment. For 'pending' payment, it can be either 'paid' or 'failed'. For 'paid' payment, it can be either 'cancelled' or 'refunded' ",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "use_external_id": {
                    "description": "Set it to true if payment_uid is the transaction_id. Otherwise, ignore this parameter.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "payment"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/payouts": {
      "post": {
        "description": "Creates a Payout",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payout": {
                      "account_number": "1111",
                      "business_uid": "34820dbe698926dd",
                      "created_at": "2025-08-05T06:54:29Z",
                      "currency": "USD",
                      "fee": "33.54",
                      "net": "300.0",
                      "other": "0.01",
                      "processed_time": "2022-12-02T18:00:00Z",
                      "provider_created_time": "2022-12-01T08:00:00Z",
                      "provider_payout_id": "a103c48a8c0f706c",
                      "provider_updated_time": "2022-12-02T18:00:00Z",
                      "status": "Processed",
                      "total_amount": "333.55",
                      "uid": "th5fm59vetqe0i7k",
                      "updated_at": "2025-08-05T06:54:29Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Payout",
        "tags": [
          "Payouts"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payouts"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payout": {
                    "properties": {
                      "account_number": {
                        "description": "Payout Account Number",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "fee": {
                        "description": "Payout Fee Amount",
                        "type": "string"
                      },
                      "net": {
                        "description": "Payout Net Amount",
                        "type": "string"
                      },
                      "other": {
                        "description": "Payout Remaining Amount",
                        "type": "string"
                      },
                      "processed_time": {
                        "description": "Payout processed time",
                        "type": "string"
                      },
                      "provider_created_time": {
                        "description": "Provider Create Time",
                        "type": "string"
                      },
                      "provider_payout_id": {
                        "description": "Provider Payout ID",
                        "type": "string"
                      },
                      "provider_updated_time": {
                        "description": "Provider Update Time",
                        "type": "string"
                      },
                      "status": {
                        "description": "Payout Status",
                        "type": "string"
                      },
                      "total_amount": {
                        "description": "Total Amount",
                        "type": "string"
                      }
                    },
                    "required": [
                      "provider_payout_id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "payout"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/payouts/{provider_payout_id}": {
      "get": {
        "description": "Gets a Payout",
        "parameters": [
          {
            "description": "Provider Payout ID",
            "in": "path",
            "name": "provider_payout_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payout": {
                      "account_number": "1111",
                      "business_uid": "34820dbe698926dd",
                      "created_at": "2025-08-05T06:54:29Z",
                      "currency": "USD",
                      "fee": "33.54",
                      "net": "300.0",
                      "other": "0.01",
                      "processed_time": "2022-12-02T18:00:00Z",
                      "provider_created_time": "2022-12-01T08:00:00Z",
                      "provider_payout_id": "d00d8d0fed649b9a",
                      "provider_updated_time": "2022-12-02T18:00:00Z",
                      "status": "Processed",
                      "total_amount": "333.55",
                      "uid": "o82mnnnz24ro2avo",
                      "updated_at": "2025-08-05T06:54:29Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Payout",
        "tags": [
          "Payouts"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payouts/{provider_payout_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "Updates a Payout",
        "parameters": [
          {
            "description": "Provider Payout ID",
            "in": "path",
            "name": "provider_payout_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "payout": {
                      "account_number": "1111",
                      "business_uid": "34820dbe698926dd",
                      "created_at": "2025-08-05T06:54:29Z",
                      "currency": "USD",
                      "fee": "33.54",
                      "net": "300.0",
                      "other": "0.01",
                      "processed_time": "2022-12-02T18:00:00Z",
                      "provider_created_time": "2022-12-01T08:00:00Z",
                      "provider_payout_id": "d00d8d0fed649b9a",
                      "provider_updated_time": "2022-12-02T18:00:00Z",
                      "status": "Processed",
                      "total_amount": "333.55",
                      "uid": "o82mnnnz24ro2avo",
                      "updated_at": "2025-08-05T06:54:29Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Payout",
        "tags": [
          "Payouts"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/payouts/{provider_payout_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payout": {
                    "properties": {
                      "account_number": {
                        "description": "Payout Account Number",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "fee": {
                        "description": "Payout Fee Amount",
                        "type": "string"
                      },
                      "net": {
                        "description": "Payout Net Amount",
                        "type": "string"
                      },
                      "other": {
                        "description": "Payout Remaining Amount",
                        "type": "string"
                      },
                      "processed_time": {
                        "description": "Payout processed time",
                        "type": "string"
                      },
                      "provider_created_time": {
                        "description": "Provider Create Time",
                        "type": "string"
                      },
                      "provider_updated_time": {
                        "description": "Provider Update Time",
                        "type": "string"
                      },
                      "status": {
                        "description": "Payout Status",
                        "type": "string"
                      },
                      "total_amount": {
                        "description": "Total Amount",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "payout"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/product_orders": {
      "post": {
        "description": "Creates a Product Order",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product_order": {
                      "client_id": "u9mqcvkj4s4l5c44",
                      "cost": null,
                      "created_at": "2025-08-05T09:54:33.423+03:00",
                      "currency": "USD",
                      "description": "Best hair shampoo",
                      "id": "irtbidn0039v6c7e",
                      "matter_uid": "46nrcmt1lzeyccsg",
                      "name": "Shampoo",
                      "payment_request_id": "3nzp3dnyxwhu8glv",
                      "payment_request_state": "pending",
                      "price": "5.0",
                      "product_id": "kg3mnfc8j9qvqeu2",
                      "staff_id": "6d9ec6fb26d819cc",
                      "taxes": [
                        {
                          "name": "VAT",
                          "rate": 10,
                          "tax_total": 0.5
                        }
                      ],
                      "total_price": "5.5"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Product Order",
        "tags": [
          "Product Orders"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/product_orders"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "product_order": {
                    "properties": {
                      "client_id": {
                        "description": "Client UID",
                        "type": "string"
                      },
                      "matter_uid": {
                        "description": "Matter UID",
                        "type": "string"
                      },
                      "price": {
                        "description": "Price. Default: product price.",
                        "type": "number"
                      },
                      "product_id": {
                        "description": "Product UID",
                        "type": "string"
                      },
                      "tax_ids": {
                        "description": "Tax UIDs. Default: product taxes. [] will remove the product's taxes. Up to 3 taxes per product are allowed.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "client_id",
                      "product_id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "product_order"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/product_orders/{product_order_id}": {
      "get": {
        "description": "Gets a Product Order",
        "parameters": [
          {
            "description": "Product Order UID",
            "in": "path",
            "name": "product_order_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product_order": {
                      "client_id": "u9mqcvkj4s4l5c44",
                      "cost": null,
                      "created_at": "2025-08-05T09:54:31.840+03:00",
                      "currency": "USD",
                      "description": "Best hair shampoo",
                      "id": "j1yv50998tacuuod",
                      "matter_uid": "46nrcmt1lzeyccsg",
                      "name": "Shampoo",
                      "payment_request_id": "oki75v7odnl6l9at",
                      "payment_request_state": "pending",
                      "price": "10.0",
                      "product_id": "kg3mnfc8j9qvqeu2",
                      "staff_id": "6d9ec6fb26d819cc",
                      "taxes": [
                        {
                          "name": "VAT",
                          "rate": 10,
                          "tax_total": 1
                        }
                      ],
                      "total_price": "11.0"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Product Order",
        "tags": [
          "Product Orders"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/product_orders/{product_order_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "Updates a Product Order",
        "parameters": [
          {
            "description": "Product Order UID",
            "in": "path",
            "name": "product_order_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product_order": {
                      "client_id": "u9mqcvkj4s4l5c44",
                      "cost": null,
                      "created_at": "2025-08-05T09:54:31.840+03:00",
                      "currency": "USD",
                      "description": "Best hair shampoo",
                      "id": "j1yv50998tacuuod",
                      "matter_uid": "46nrcmt1lzeyccsg",
                      "name": "Shampoo",
                      "payment_request_id": "oki75v7odnl6l9at",
                      "payment_request_state": "pending",
                      "price": "100.0",
                      "product_id": "kg3mnfc8j9qvqeu2",
                      "staff_id": "6d9ec6fb26d819cc",
                      "taxes": [
                        {
                          "name": "VAT",
                          "rate": 10,
                          "tax_total": 10
                        }
                      ],
                      "total_price": "110.0"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Product Order",
        "tags": [
          "Product Orders"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/product_orders/{product_order_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "product_order": {
                    "properties": {
                      "price": {
                        "description": "Price",
                        "type": "number"
                      },
                      "tax_ids": {
                        "description": "Tax UIDs. [] will remove the product order's taxes. Up to 3 taxes per product order are allowed.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "product_order"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Available filters: display=true / display=false (return only products with display set to true / false). Usage: filter[display]=true. contains=search_string (return only products containing the provided search_string in their name or in their SKU). Usage: filter[contains]=‘search_string.’",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "products": [
                      {
                        "business_id": "vk8xo7s125mi1ln2",
                        "cost": "50.0",
                        "created_at": "2020-10-05T16:46:34.225+03:00",
                        "currency": "USD",
                        "description": "Classic",
                        "display": true,
                        "id": "5ea8ouxnkd4avj0c",
                        "image_url": "https://www.image.url",
                        "name": "Guitar",
                        "price": "100.0",
                        "sku": "ABC123",
                        "staff_id": "cx2ynjcmftohut0h",
                        "taxes": [
                          {
                            "id": "wz93stkj9vuicx4p",
                            "name": "VAT",
                            "rate": "10.0"
                          }
                        ],
                        "total_price": "110.0"
                      }
                    ]
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Products List",
        "tags": [
          "Products"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/products"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "description": "Each business has a limit of 8,500 products",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Product Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product": {
                      "business_id": "vk8xo7s125mi1ln2",
                      "cost": "50.0",
                      "created_at": "2020-10-05T16:46:34.225+03:00",
                      "currency": "USD",
                      "description": "Classic",
                      "display": true,
                      "id": "5ea8ouxnkd4avj0c",
                      "image_url": "https://www.image.url",
                      "name": "Guitar",
                      "price": "100.0",
                      "sku": "ABC123",
                      "staff_id": "cx2ynjcmftohut0h",
                      "taxes": [
                        {
                          "id": "wz93stkj9vuicx4p",
                          "name": "VAT",
                          "rate": "10.0"
                        }
                      ],
                      "total_price": "110.0"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Product",
        "tags": [
          "Products"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/products"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "product": {
                    "properties": {
                      "cost": {
                        "description": "Product cost",
                        "type": "number"
                      },
                      "currency": {
                        "description": "Product currency",
                        "type": "string"
                      },
                      "description": {
                        "description": "Product description",
                        "type": "string"
                      },
                      "display": {
                        "description": "Display on products list. Default: true",
                        "type": "boolean"
                      },
                      "image_url": {
                        "description": "Product image URL",
                        "type": "string"
                      },
                      "name": {
                        "description": "Product name",
                        "type": "string"
                      },
                      "price": {
                        "description": "Product price",
                        "type": "number"
                      },
                      "sku": {
                        "description": "Product SKU - must be unique per business",
                        "type": "string"
                      },
                      "tax_ids": {
                        "description": "Product Tax IDs",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "price"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "product"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/products/{product_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Removed",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Remove Product [Alpha]",
        "tags": [
          "Products"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "requestParameters": {
            "integration.request.path.product_id": "method.request.path.product_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/products/{product_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product": {
                      "business_id": "vk8xo7s125mi1ln2",
                      "cost": "50.0",
                      "created_at": "2020-10-05T16:46:34.225+03:00",
                      "currency": "USD",
                      "description": "Classic",
                      "display": true,
                      "id": "5ea8ouxnkd4avj0c",
                      "image_url": "https://www.image.url",
                      "name": "Guitar",
                      "price": "100.0",
                      "sku": "ABC123",
                      "staff_id": "cx2ynjcmftohut0h",
                      "taxes": [
                        {
                          "id": "wz93stkj9vuicx4p",
                          "name": "VAT",
                          "rate": "10.0"
                        }
                      ],
                      "total_price": "110.0"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Product [Alpha]",
        "tags": [
          "Products"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.product_id": "method.request.path.product_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/products/{product_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "product": {
                      "business_id": "vk8xo7s125mi1ln2",
                      "cost": "50.0",
                      "created_at": "2020-10-05T16:46:34.225+03:00",
                      "currency": "USD",
                      "description": "Classic",
                      "display": true,
                      "id": "5ea8ouxnkd4avj0c",
                      "image_url": "https://www.image.url",
                      "name": "Guitar",
                      "price": "100.0",
                      "sku": "ABC123",
                      "staff_id": "cx2ynjcmftohut0h",
                      "taxes": [
                        {
                          "id": "wz93stkj9vuicx4p",
                          "name": "VAT",
                          "rate": "10.0"
                        }
                      ],
                      "total_price": "110.0"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Product",
        "tags": [
          "Products"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.product_id": "method.request.path.product_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/products/{product_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "product": {
                    "properties": {
                      "cost": {
                        "description": "Product cost",
                        "type": "number"
                      },
                      "description": {
                        "description": "Product description",
                        "type": "string"
                      },
                      "display": {
                        "description": "Display on products list",
                        "type": "boolean"
                      },
                      "image_url": {
                        "description": "Product image URL",
                        "type": "string"
                      },
                      "name": {
                        "description": "Product name",
                        "type": "string"
                      },
                      "price": {
                        "description": "Product price",
                        "type": "number"
                      },
                      "sku": {
                        "description": "Product SKU - must be unique per business",
                        "type": "string"
                      },
                      "tax_ids": {
                        "description": "Product Tax IDs. [] will remove the product's taxes. Up to 3 taxes per product are allowed.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "product"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/refunds": {
      "post": {
        "description": "Creates a Refund",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "refund": {
                      "amount": "10.0",
                      "created_at": "2025-08-05T06:54:43Z",
                      "currency": "USD",
                      "payment_uid": "j09s0ve386dnzjvw",
                      "provider_refund_id": null,
                      "refund_time": "2025-08-05T06:54:43Z",
                      "staff_uid": "4b58e5bb45c1b0ac",
                      "uid": "80rwbw4wehojb9nl",
                      "updated_at": "2025-08-05T06:54:43Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Refund",
        "tags": [
          "Refunds"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/refunds"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refund": {
                    "properties": {
                      "amount": {
                        "description": "The amount to refund. If not specified, the remaining amount of the payment will be refunded (original payment amount minus previously refunded amount).",
                        "type": "number"
                      },
                      "payment_uid": {
                        "description": "The UID of the payment to refund. Either payment_uid or provider_transaction_id is required.",
                        "type": "string"
                      },
                      "provider_refund_id": {
                        "description": "Provider refund ID. Can be provided when record_refund is set to true.",
                        "type": "string"
                      },
                      "provider_transaction_id": {
                        "description": "The provider transaction ID of the payment to refund. Either payment_uid or provider_transaction_id is required.",
                        "type": "string"
                      },
                      "record_refund": {
                        "description": "Record refund. Set to true to record a previously processed refund. Default value: false",
                        "type": "boolean"
                      },
                      "refund_time": {
                        "description": "Refund time (in ISO 8601 format). Can be provided when record_refund is set to true.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "payment_uid",
                      "provider_transaction_id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "refund"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/scheduled_payments_rules": {
      "get": {
        "description": "Get a list of Scheduled Payment Rules",
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "scheduled_payments_rules": [
                      {
                        "amount": "50.0",
                        "amount_paid": "0.0",
                        "canceled_by": "",
                        "canceled_date": null,
                        "created_at": "2025-08-05T06:54:49Z",
                        "currency": "USD",
                        "cycles": 20,
                        "cycles_count": 0,
                        "description": "schedule payment rule example",
                        "end_date": "2025-12-17T07:56:00Z",
                        "frequency_type": "weekly",
                        "matter_uid": "js7c2h9g3zwbigf8",
                        "name": "schedule payment rule",
                        "next_payment_time": "2025-08-06T06:56:00Z",
                        "payment_method": {
                          "type": "card",
                          "uid": "tkej8m7xm6ixx6zt"
                        },
                        "rrule": "---\n:start_time: &1\n  :time: 2025-08-06 06:56:00.000000000 Z\n  :zone: Central Time (US & Canada)\n:start_date: *1\n:rrules:\n- :validations: {}\n  :rule_type: IceCube::WeeklyRule\n  :interval: 1\n  :week_start: 0\n  :count: 20\n:rtimes: []\n:extimes: []\n",
                        "staff_uid": "1c3ab579d2d31fbb",
                        "start_date": "2025-08-06T06:56:00Z",
                        "status": "active",
                        "uid": "skt1h1awrkiv6he1",
                        "updated_at": "2025-08-05T06:54:49Z"
                      }
                    ]
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get list of Scheduled Payment Rules",
        "tags": [
          "Scheduled Payment Rule"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/scheduled_payments_rules"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "description": "Creates a Scheduled Payment Rule",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "scheduled_payments_rule": {
                      "amount": "50.0",
                      "amount_paid": "0.0",
                      "canceled_by": "",
                      "canceled_date": null,
                      "created_at": "2025-08-05T06:54:50Z",
                      "currency": "USD",
                      "cycles": 20,
                      "cycles_count": 0,
                      "description": "schedule payment rule example",
                      "end_date": "2025-12-17T07:56:00Z",
                      "frequency_type": "weekly",
                      "matter_uid": "js7c2h9g3zwbigf8",
                      "name": "schedule payment rule",
                      "next_payment_time": "2025-08-06T06:56:00Z",
                      "payment_method": {
                        "type": "card",
                        "uid": "tkej8m7xm6ixx6zt"
                      },
                      "rrule": "---\n:start_time: &1\n  :time: 2025-08-06 06:56:00.000000000 Z\n  :zone: Central Time (US & Canada)\n:start_date: *1\n:rrules:\n- :validations: {}\n  :rule_type: IceCube::WeeklyRule\n  :interval: 1\n  :week_start: 0\n  :count: 20\n:rtimes: []\n:extimes: []\n",
                      "staff_uid": "1c3ab579d2d31fbb",
                      "start_date": "2025-08-06T06:56:00Z",
                      "status": "active",
                      "uid": "7gilictbt12jir3v",
                      "updated_at": "2025-08-05T06:54:50Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Scheduled Payment Rule",
        "tags": [
          "Scheduled Payment Rule"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/scheduled_payments_rules"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scheduled_payments_rule": {
                    "properties": {
                      "amount": {
                        "description": "Scheduled Payment amount",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "cycles": {
                        "description": "Scheduled Payment Rule cycles",
                        "type": "string"
                      },
                      "description": {
                        "description": "Scheduled Payment Rule description",
                        "type": "string"
                      },
                      "frequency_type": {
                        "description": "Scheduled Payment Rule frequency type. Possible values: OneTime / Weekly / Monthly",
                        "type": "string"
                      },
                      "matter_uid": {
                        "description": "Related Matter UID",
                        "type": "string"
                      },
                      "name": {
                        "description": "Scheduled Payment Rule name",
                        "type": "string"
                      },
                      "payment_method": {
                        "properties": {
                          "type": {
                            "description": "Scheduled Payment Rule payment method type. Possible values: card",
                            "type": "string"
                          },
                          "uid": {
                            "description": "Related Card UID",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "send_receipt": {
                        "description": "Indicates whether to send a receipt to the client",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Scheduled Payment start date",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "amount",
                      "currency",
                      "start_date",
                      "frequency_type",
                      "cycles",
                      "send_receipt",
                      "matter_uid",
                      "payment_method"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "scheduled_payments_rule"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/scheduled_payments_rules/{scheduled_payments_rule_uid}/cancel": {
      "put": {
        "description": "Cancels a Recurring Payments Rule",
        "parameters": [
          {
            "description": "Recurring Payments Rule uid",
            "in": "path",
            "name": "scheduled_payments_rule_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "scheduled_payments_rule": {
                      "amount": "50.0",
                      "amount_paid": "0.0",
                      "canceled_by": "Josephine Harvey",
                      "canceled_date": "2025-08-05T06:54:50Z",
                      "created_at": "2025-08-05T06:54:49Z",
                      "currency": "USD",
                      "cycles": 20,
                      "cycles_count": 0,
                      "description": "schedule payment rule example",
                      "end_date": "2025-12-17T07:56:00Z",
                      "frequency_type": "weekly",
                      "matter_uid": "js7c2h9g3zwbigf8",
                      "name": "schedule payment rule",
                      "next_payment_time": null,
                      "payment_method": {
                        "type": "card",
                        "uid": "tkej8m7xm6ixx6zt"
                      },
                      "rrule": "---\n:start_time: &1\n  :time: 2025-08-06 06:56:00.000000000 Z\n  :zone: Central Time (US & Canada)\n:start_date: *1\n:rrules:\n- :validations: {}\n  :rule_type: IceCube::WeeklyRule\n  :interval: 1\n  :week_start: 0\n  :count: 20\n:rtimes: []\n:extimes: []\n",
                      "staff_uid": "1c3ab579d2d31fbb",
                      "start_date": "2025-08-06T06:56:00Z",
                      "status": "cancelled",
                      "uid": "skt1h1awrkiv6he1",
                      "updated_at": "2025-08-05T06:54:50Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Cancel Recurring Payments Rule",
        "tags": [
          "Scheduled Payment Rule"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/scheduled_payments_rules/{scheduled_payments_rule_uid}/cancel"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/scheduled_payments_rules/{uid}": {
      "get": {
        "description": "Gets a Scheduled Payment Rule",
        "parameters": [
          {
            "description": "Scheduled Payment Rule UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "scheduled_payments_rule": {
                      "amount": "50.0",
                      "amount_paid": "0.0",
                      "canceled_by": "",
                      "canceled_date": null,
                      "created_at": "2025-08-05T06:54:49Z",
                      "currency": "USD",
                      "cycles": 20,
                      "cycles_count": 0,
                      "description": "schedule payment rule example",
                      "end_date": "2025-12-17T07:56:00Z",
                      "frequency_type": "weekly",
                      "matter_uid": "js7c2h9g3zwbigf8",
                      "name": "schedule payment rule",
                      "next_payment_time": "2025-08-06T06:56:00Z",
                      "payment_method": {
                        "type": "card",
                        "uid": "tkej8m7xm6ixx6zt"
                      },
                      "rrule": "---\n:start_time: &1\n  :time: 2025-08-06 06:56:00.000000000 Z\n  :zone: Central Time (US & Canada)\n:start_date: *1\n:rrules:\n- :validations: {}\n  :rule_type: IceCube::WeeklyRule\n  :interval: 1\n  :week_start: 0\n  :count: 20\n:rtimes: []\n:extimes: []\n",
                      "staff_uid": "1c3ab579d2d31fbb",
                      "start_date": "2025-08-06T06:56:00Z",
                      "status": "active",
                      "uid": "skt1h1awrkiv6he1",
                      "updated_at": "2025-08-05T06:54:49Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Scheduled Payment Rule",
        "tags": [
          "Scheduled Payment Rule"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/scheduled_payments_rules/{uid}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "Updates a Scheduled Payment Rule",
        "parameters": [
          {
            "description": "Scheduled Payment Rule UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "scheduled_payments_rule": {
                      "amount": "50.0",
                      "amount_paid": "0.0",
                      "canceled_by": "",
                      "canceled_date": null,
                      "created_at": "2025-08-05T06:54:49Z",
                      "currency": "USD",
                      "cycles": 20,
                      "cycles_count": 0,
                      "description": "schedule payment rule example",
                      "end_date": "2025-12-17T07:56:00Z",
                      "frequency_type": "weekly",
                      "matter_uid": "js7c2h9g3zwbigf8",
                      "name": "schedule payment rule",
                      "next_payment_time": "2025-08-06T06:56:00Z",
                      "payment_method": {
                        "type": "card",
                        "uid": "tkej8m7xm6ixx6zt"
                      },
                      "rrule": "---\n:start_time: &1\n  :time: 2025-08-06 06:56:00.000000000 Z\n  :zone: Central Time (US & Canada)\n:start_date: *1\n:rrules:\n- :validations: {}\n  :rule_type: IceCube::WeeklyRule\n  :interval: 1\n  :week_start: 0\n  :count: 20\n:rtimes: []\n:extimes: []\n",
                      "staff_uid": "1c3ab579d2d31fbb",
                      "start_date": "2025-08-06T06:56:00Z",
                      "status": "active",
                      "uid": "skt1h1awrkiv6he1",
                      "updated_at": "2025-08-05T06:54:49Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Scheduled Payment Rule",
        "tags": [
          "Scheduled Payment Rule"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/scheduled_payments_rules/{uid}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scheduled_payments_rule": {
                    "properties": {
                      "payment_method": {
                        "properties": {
                          "type": {
                            "description": "Scheduled Payment Rule payment method type. Possible values: card",
                            "type": "string"
                          },
                          "uid": {
                            "description": "Related Card UID",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "payment_method"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "scheduled_payments_rule"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/tax_bulk": {
      "delete": {
        "description": "Deletes some taxes",
        "parameters": [
          {
            "description": "Tax uids array[] to delete. \n In case of more than one id, query in URL will appear as: \n uids[]=ID1&uids[]=ID2",
            "in": "query",
            "name": "uids[]",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete Multiple Taxes",
        "tags": [
          "Bulk Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/tax_bulk"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "description": "Creates some taxes",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "default_for_categories": [
                        "packages"
                      ],
                      "id": "5nod2gdbux8g853x",
                      "name": "VAT",
                      "rate": 10
                    }
                  ],
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Multiple Taxes",
        "tags": [
          "Bulk Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/tax_bulk"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "Taxes array",
                    "items": {
                      "properties": {
                        "default_for_categories": {
                          "description": "Determine fow what categories the tax will be applied as default. Can receive one or more from the following items: 'services', 'products', 'packages' ",
                          "type": "string"
                        },
                        "name": {
                          "description": "Tax name",
                          "type": "string"
                        },
                        "rate": {
                          "description": "Tax rate (percentage, up to 3 decimal places). The rate should be greater than 0 and less than or equal to 100.",
                          "type": "number"
                        }
                      },
                      "required": [
                        "name",
                        "rate"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates some taxes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "tax": {
                        "default_for_categories": [
                          "packages"
                        ],
                        "id": "8uq6p8w5rhryuojn",
                        "name": "VAT",
                        "rate": 5
                      }
                    }
                  ],
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Multiple Taxes",
        "tags": [
          "Bulk Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/tax_bulk"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "Taxes array",
                    "items": {
                      "properties": {
                        "default_for_categories": {
                          "description": "Determine fow what categories the tax will be applied as default. Can receive one or more from the following items: 'services', 'products', 'packages' ",
                          "type": "string"
                        },
                        "name": {
                          "description": "Tax name",
                          "type": "string"
                        },
                        "rate": {
                          "description": "Tax rate (percentage, up to 3 decimal places). The rate should be greater than 0 and less than or equal to 100.",
                          "type": "number"
                        }
                      },
                      "required": [
                        "name",
                        "rate"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/tax_bulk/apply_defaults": {
      "put": {
        "description": "Apply default taxes on items (Services/Products/Booking Packages) that don't have any taxes configured",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "message": "Default taxes will be applied in the background"
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Apply Default Taxes",
        "tags": [
          "Bulk Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/tax_bulk/apply_defaults"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/taxes": {
      "get": {
        "parameters": [
          {
            "description": "Page offset (default: 1)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (default: 25)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Taxes Returned",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "taxes": [
                      {
                        "default_for_categories": [
                          "packages"
                        ],
                        "id": "4k5v53fnmpdwe4ba",
                        "name": "VAT",
                        "rate": 10
                      }
                    ]
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Taxes List [Alpha]",
        "tags": [
          "Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/taxes"
        },
        "x-auth-type": "Application & Application User"
      },
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Tax Created",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "tax": {
                      "default_for_categories": [
                        "packages"
                      ],
                      "id": "5ea8ouxnkd4avj0c",
                      "name": "VAT",
                      "rate": 10
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Tax [Alpha]",
        "tags": [
          "Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/taxes"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tax": {
                    "properties": {
                      "default_for_categories": {
                        "description": "Determine fow what categories the tax will be applied as default. Can receive one or more from the following items: 'services', 'products', 'packages' ",
                        "type": "string"
                      },
                      "name": {
                        "description": "Tax name",
                        "type": "string"
                      },
                      "rate": {
                        "description": "Tax rate (percentage, up to 3 decimal places). The rate should be greater than 0 and less than or equal to 100.",
                        "type": "number"
                      }
                    },
                    "required": [
                      "name",
                      "rate"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "tax"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/taxes/{tax_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "tax_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax Removed",
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Remove Tax [Alpha]",
        "tags": [
          "Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "requestParameters": {
            "integration.request.path.tax_id": "method.request.path.tax_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/taxes/{tax_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "tax_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax Retrieved",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "tax": {
                      "default_for_categories": [
                        "packages"
                      ],
                      "id": "4k5v53fnmpdwe4ba",
                      "name": "VAT",
                      "rate": 12
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Tax [Alpha]",
        "tags": [
          "Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "requestParameters": {
            "integration.request.path.tax_id": "method.request.path.tax_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/taxes/{tax_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "tax_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax Updated",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "tax": {
                      "default_for_categories": [
                        "packages"
                      ],
                      "id": "4k5v53fnmpdwe4ba",
                      "name": "VAT",
                      "rate": 12
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Tax [Alpha]",
        "tags": [
          "Taxes"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "requestParameters": {
            "integration.request.path.tax_id": "method.request.path.tax_id"
          },
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/taxes/{tax_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tax": {
                    "properties": {
                      "default_for_categories": {
                        "description": "Determine fow what categories the tax will be applied as default. Can receive one or more from the following items: 'services', 'products', 'packages' ",
                        "type": "string"
                      },
                      "name": {
                        "description": "Tax name",
                        "type": "string"
                      },
                      "rate": {
                        "description": "Tax rate (percentage, up to 3 decimal places). The rate should be greater than 0 and less than or equal to 100.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "tax"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/transactions": {
      "post": {
        "description": "Creates a Transaction",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "transaction": {
                      "business_uid": "8696174e02faf5d4",
                      "card_bin": "411111",
                      "card_brand": "visa",
                      "card_issuing_bank": "Bank of America",
                      "card_last4": "2468",
                      "cardholder_name": "CARDHOLDER NAME",
                      "create_time": "2022-06-01T08:00:00Z",
                      "created_at": "2025-08-05T06:54:57Z",
                      "currency": "USD",
                      "error_data": null,
                      "fee": "5.5",
                      "metadata": {
                        "url_key": "aBcdejBOSMATlMnOpqrSTuvwxyz"
                      },
                      "net": "194.5",
                      "provider": "provider",
                      "provider_transaction_id": "3e04d954c105b280",
                      "related_provider_payout_id": "p1_dbm_aaaaaaaa111111111bbbbbb",
                      "settle_time": "2022-06-02T18:00:00Z",
                      "status": "settled",
                      "total_amount": "200.0",
                      "transaction_type": "sale",
                      "uid": "sep8qliw34xnw7et",
                      "updated_at": "2025-08-05T06:54:57Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create Transaction",
        "tags": [
          "Transactions"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/transactions"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transaction": {
                    "properties": {
                      "card_bin": {
                        "description": "Payment Card BIN",
                        "type": "string"
                      },
                      "card_brand": {
                        "description": "Payment Card Brand",
                        "type": "string"
                      },
                      "card_issuing_bank": {
                        "description": "Payment Card Issuing Bank Name",
                        "type": "string"
                      },
                      "card_last4": {
                        "description": "Payment Card Last 4 digits",
                        "type": "string"
                      },
                      "cardholder_name": {
                        "description": "Cardholder Name",
                        "type": "string"
                      },
                      "create_time": {
                        "description": "Transaction Create Time",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "error_data": {
                        "description": "Transaction Error Data",
                        "type": "string"
                      },
                      "fee": {
                        "description": "Transaction Fee Amount",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Set of key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.",
                        "type": "string"
                      },
                      "net": {
                        "description": "Transaction Net Amount",
                        "type": "string"
                      },
                      "provider": {
                        "description": "Provider Name",
                        "type": "string"
                      },
                      "provider_transaction_id": {
                        "description": "Provider Transaction ID",
                        "type": "string"
                      },
                      "related_provider_payout_id": {
                        "description": "The id of the provider payout that the transaction is a part of",
                        "type": "string"
                      },
                      "settle_time": {
                        "description": "Transaction Settle Time",
                        "type": "string"
                      },
                      "status": {
                        "description": "Transaction Status",
                        "type": "string"
                      },
                      "total_amount": {
                        "description": "Total Amount",
                        "type": "string"
                      },
                      "transaction_type": {
                        "description": "Transaction Type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "provider_transaction_id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "transaction"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/transactions/{provider_transaction_id}": {
      "get": {
        "description": "Gets a Transaction",
        "parameters": [
          {
            "description": "Provider Transaction ID",
            "in": "path",
            "name": "provider_transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "transaction": {
                      "business_uid": "8696174e02faf5d4",
                      "card_bin": "411111",
                      "card_brand": "visa",
                      "card_issuing_bank": "Bank of America",
                      "card_last4": "2468",
                      "cardholder_name": "CARDHOLDER NAME",
                      "create_time": "2022-06-01T08:00:00Z",
                      "created_at": "2025-08-05T06:54:57Z",
                      "currency": "USD",
                      "error_data": null,
                      "fee": "5.5",
                      "metadata": {
                        "url_key": "aBcdejBOSMATlMnOpqrSTuvwxyz"
                      },
                      "net": "194.5",
                      "provider": "provider",
                      "provider_transaction_id": "d0679d76fef9769d",
                      "related_provider_payout_id": "p1_dbm_aaaaaaaa111111111bbbbbb",
                      "settle_time": "2022-06-02T18:00:00Z",
                      "status": "settled",
                      "total_amount": "200.0",
                      "transaction_type": "sale",
                      "uid": "4lahbms0392q9cma",
                      "updated_at": "2025-08-05T06:54:57Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Transaction",
        "tags": [
          "Transactions"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/transactions/{provider_transaction_id}"
        },
        "x-auth-type": "Application & Application User"
      },
      "put": {
        "description": "Updates a Transaction",
        "parameters": [
          {
            "description": "Provider Transaction ID",
            "in": "path",
            "name": "provider_transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "transaction": {
                      "business_uid": "8696174e02faf5d4",
                      "card_bin": "411111",
                      "card_brand": "visa",
                      "card_issuing_bank": "Bank of America",
                      "card_last4": "2468",
                      "cardholder_name": "CARDHOLDER NAME",
                      "create_time": "2022-06-01T08:00:00Z",
                      "created_at": "2025-08-05T06:54:57Z",
                      "currency": "USD",
                      "error_data": null,
                      "fee": "50.0",
                      "metadata": {
                        "url_key": "aBcdejBOSMATlMnOpqrSTuvwxyz"
                      },
                      "net": "150.0",
                      "provider": "provider",
                      "provider_transaction_id": "d0679d76fef9769d",
                      "related_provider_payout_id": "p1_dbm_aaaaaaaa111111111bbbbbb",
                      "settle_time": "2022-06-02T18:00:00Z",
                      "status": "settled",
                      "total_amount": "200.0",
                      "transaction_type": "sale",
                      "uid": "4lahbms0392q9cma",
                      "updated_at": "2025-08-05T06:54:58Z"
                    }
                  },
                  "success": true
                }
              }
            }
          },
          "422": {
            "description": "Failure",
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "Error Code",
                      "field": "Error Field (optional)",
                      "message": "Error Message"
                    }
                  ],
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update Transaction",
        "tags": [
          "Transactions"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/payments/v1/transactions/{provider_transaction_id}"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transaction": {
                    "properties": {
                      "card_bin": {
                        "description": "Payment Card BIN",
                        "type": "string"
                      },
                      "card_brand": {
                        "description": "Payment Card Brand",
                        "type": "string"
                      },
                      "card_issuing_bank": {
                        "description": "Payment Card Issuing Bank Name",
                        "type": "string"
                      },
                      "card_last4": {
                        "description": "Payment Card Last 4 digits",
                        "type": "string"
                      },
                      "cardholder_name": {
                        "description": "Cardholder Name",
                        "type": "string"
                      },
                      "create_time": {
                        "description": "Transaction Create Time",
                        "type": "string"
                      },
                      "currency": {
                        "description": "Three-letter ISO currency code",
                        "type": "string"
                      },
                      "error_data": {
                        "description": "Transaction Error Data",
                        "type": "string"
                      },
                      "fee": {
                        "description": "Transaction Fee Amount",
                        "type": "string"
                      },
                      "net": {
                        "description": "Transaction Net Amount",
                        "type": "string"
                      },
                      "related_provider_payout_id": {
                        "description": "The id of the provider payout that the transaction is a part of",
                        "type": "string"
                      },
                      "settle_time": {
                        "description": "Transaction Settle Time",
                        "type": "string"
                      },
                      "status": {
                        "description": "Transaction Status",
                        "type": "string"
                      },
                      "total_amount": {
                        "description": "Total Amount",
                        "type": "string"
                      },
                      "transaction_type": {
                        "description": "Transaction Type",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "transaction"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v3/sales/coupons": {
      "get": {
        "summary": "Get all Coupons",
        "description": "Get a list of Coupons - Available for **Staff Tokens**",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "expiered",
                "scheduled",
                "still_available"
              ]
            },
            "description": "Filter parameter coupon status, optional values = [active / expiered / scheduled / still_available]",
            "required": false
          },
          {
            "name": "uid_list",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter the coupon list based on an array of coupon unique identifiers (UIDs)",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Page number of results. Default: 1",
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "How many items to return per page. Default: 25. Max: 100",
            "required": false
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Sort by fields. Example: sort=created_at:asc,updated_at:desc",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CouponsList"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/sales/reports/payments_widget": {
      "get": {
        "summary": "Retrieve Payments Widget Data",
        "description": "Fetch summarized data for the Payments widget, including total payments, overdue payments, and pending estimates. This endpoint is accessible with **Staff Tokens** only.",
        "responses": {
          "200": {
            "description": "Successful response containing Payments widget data.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentsWidget"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Sales Reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/payment_processing/payment_gateways": {
      "get": {
        "summary": "Get all PaymentGateways",
        "description": "Retrieve all available payment gateways - Available for **Directory and Business Tokens**",
        "parameters": [
          {
            "name": "directory_uid",
            "in": "query",
            "description": "Filter by directory unique identifier",
            "schema": {
              "type": "string"
            },
            "example": "main_directory"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filter by country, represented using ISO 3166-1 alpha-2 country codes. For example: ['US', 'CA', 'GB']",
            "schema": {
              "type": "string"
            },
            "example": "US"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Filter by supported currency, represented using ISO 4217 format. For example: ['USD', 'EUR', 'GBP']",
            "schema": {
              "type": "string"
            },
            "example": "USD"
          },
          {
            "name": "app_code_name",
            "in": "query",
            "description": "Filter by app code name",
            "schema": {
              "type": "string"
            },
            "example": "stripe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentGatewayList"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a PaymentGateway",
        "description": "Create a new payment gateway - **Only available for Application Tokens**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_code_name": {
                    "type": "string",
                    "description": "The unique code name of the pre-created gateway's app, created via the API- Creates an app, https://api.vcita.biz/platform/v1/apps"
                  },
                  "gateway_logo_url": {
                    "type": "string",
                    "description": "The URL or path to the logo of the gateway"
                  },
                  "default_locale": {
                    "type": "string",
                    "description": "Specifies the fallback locale for the gateway's textual content. If a translation or string is missing, this locale will be used by default."
                  },
                  "gateway_type": {
                    "type": "string",
                    "enum": [
                      "digital_wallet",
                      "payments_provider"
                    ],
                    "description": "Integration type: a payment service provider (e.g., Stripe, Square) that enables merchants to process multiple payment methods, or a digital wallet (e.g., PayPal, Google Pay) that allows consumers to store and use payment credentials"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "disabled",
                      "deprecated"
                    ],
                    "description": "Indicates the current status of the payment gateway: 'active' (available for use), 'disabled' (not available for use), or 'deprecated' (still available but not recommended for new integrations)"
                  },
                  "main_gateway_benefits": {
                    "type": "array",
                    "description": "A clear 3-4 bullet list highlighting the unique features and value of the gateway, aimed at encouraging merchants to connect with it. This information is stored per locale.",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "locale": {
                          "type": "string",
                          "enum": [
                            "en",
                            "fr",
                            "de",
                            "it",
                            "pl",
                            "pt",
                            "es",
                            "nl",
                            "he",
                            "en_gb"
                          ],
                          "description": "The locale code (e.g., en, fr, es)."
                        },
                        "benefits": {
                          "type": "array",
                          "description": "A list of benefits in the specified locale.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "locale",
                        "benefits"
                      ]
                    }
                  },
                  "brief_benefit_highlights": {
                    "type": "array",
                    "description": "A brief, 2-4 word version of the gateway benefits, tailored for compact displays or mobile interfaces. This information is stored per locale.",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "locale": {
                          "type": "string",
                          "enum": [
                            "en",
                            "fr",
                            "de",
                            "it",
                            "pl",
                            "pt",
                            "es",
                            "nl",
                            "he",
                            "en_gb"
                          ],
                          "description": "The locale code (e.g., en, fr, es)."
                        },
                        "highlights": {
                          "type": "array",
                          "description": "A list of short benefit highlights in the specified locale.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "locale",
                        "highlights"
                      ]
                    }
                  },
                  "supported_countries": {
                    "type": "array",
                    "description": "A list of countries supported by the payment gateway, represented using ISO 3166-1 alpha-2 country codes. For example: ['US', 'CA', 'GB']",
                    "items": {
                      "type": "string"
                    }
                  },
                  "supported_currencies": {
                    "type": "array",
                    "description": "A list of currencies supported by the payment gateway, represented using ISO 4217 format. For example: ['USD', 'EUR', 'GBP']",
                    "items": {
                      "type": "string"
                    }
                  },
                  "minimum_charge_amount": {
                    "type": "number",
                    "description": "The minimum value that can be charged using the payment gateway"
                  },
                  "payment_methods": {
                    "type": "object",
                    "description": "The payment methods supported by the gateway",
                    "properties": {
                      "credit_card": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports credit card payments."
                      },
                      "ach": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports ACH payments."
                      },
                      "ideal": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports iDeal payments."
                      },
                      "bancontact": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports Bancontact payments."
                      },
                      "twint": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports Twint payments."
                      }
                    }
                  },
                  "processing_features": {
                    "type": "object",
                    "description": "The features the payment gateway supports and their current state (enabled/disabled)",
                    "properties": {
                      "multi_currency": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports multi-currency transactions."
                      },
                      "back_office_charge": {
                        "type": "boolean",
                        "description": "Indicates if the gateway allows the SMB to process charges directly from the back office."
                      },
                      "checkout": {
                        "type": "boolean",
                        "description": "Indicates whether the payment gateway supports a checkout option initiated from the client portal. This value must always be set to true, as client portal checkout is a core feature."
                      },
                      "refund": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports full online refunds."
                      },
                      "partial_refund": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports partial online refunds. Requires full refunds to be enabled."
                      },
                      "client_save_card_on_checkout": {
                        "type": "boolean",
                        "description": "Indicates if clients can save cards on file during a payment flow."
                      },
                      "client_save_card_standalone": {
                        "type": "boolean",
                        "description": "Indicates if clients can save cards on file through a standalone flow."
                      },
                      "save_card_by_business": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports saving cards on file from the business side."
                      }
                    },
                    "required": [
                      "multi_currency",
                      "back_office_charge",
                      "checkout",
                      "refund",
                      "partial_refund",
                      "client_save_card_on_checkout",
                      "client_save_card_standalone",
                      "save_card_by_business"
                    ]
                  }
                },
                "required": [
                  "app_code_name",
                  "gateway_logo_url",
                  "default_locale",
                  "gateway_type",
                  "status",
                  "main_gateway_benefits",
                  "brief_benefit_highlights",
                  "supported_countries",
                  "supported_currencies",
                  "payment_methods",
                  "processing_features"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment gateway created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/payment_processing/payment_gateway.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/payment_processing/payment_gateways/{uid}": {
      "get": {
        "summary": "Retrieve a PaymentGateway",
        "description": "Get details of a specific payment gateway - Available for **Directory, Business, and Application Tokens**. Note: Application tokens can only access their own gateway.",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the Payment Gateway",
            "schema": {
              "type": "string"
            },
            "example": "pgw_abc123def456"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/payment_processing/payment_gateway.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update a PaymentGateway",
        "description": "Update an existing payment gateway - Available for **Application Tokens**",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the Payment Gateway",
            "schema": {
              "type": "string"
            },
            "example": "pgw_abc123def456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gateway_logo_url": {
                    "type": "string",
                    "description": "The URL to the logo of the gateway"
                  },
                  "default_locale": {
                    "type": "string",
                    "description": "Specifies the fallback locale for the gateway's textual content. If a translation or string is missing, this locale will be used by default."
                  },
                  "gateway_type": {
                    "type": "string",
                    "enum": [
                      "digital_wallet",
                      "payments_provider"
                    ],
                    "description": "Integration type: a payment service provider (e.g., Stripe, Square) that enables merchants to process multiple payment methods, or a digital wallet (e.g., PayPal, Google Pay) that allows consumers to store and use payment credentials"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "disabled",
                      "deprecated"
                    ],
                    "description": "Indicates the current status of the payment gateway: 'active' (available for use), 'disabled' (not available for use), or 'deprecated' (still available but not recommended for new integrations)"
                  },
                  "main_gateway_benefits": {
                    "type": "array",
                    "description": "A clear 3-4 bullet list highlighting the unique features and value of the gateway, aimed at encouraging merchants to connect with it. This information is stored per locale.",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "locale": {
                          "type": "string",
                          "enum": [
                            "en",
                            "fr",
                            "de",
                            "it",
                            "pl",
                            "pt",
                            "es",
                            "nl",
                            "he",
                            "en_gb"
                          ],
                          "description": "The locale code (e.g., en, fr, es)."
                        },
                        "benefits": {
                          "type": "array",
                          "description": "A list of benefits in the specified locale.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "locale",
                        "benefits"
                      ]
                    }
                  },
                  "brief_benefit_highlights": {
                    "type": "array",
                    "description": "A brief, 2-4 word version of the gateway benefits, tailored for compact displays or mobile interfaces. This information is stored per locale.",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "locale": {
                          "type": "string",
                          "enum": [
                            "en",
                            "fr",
                            "de",
                            "it",
                            "pl",
                            "pt",
                            "es",
                            "nl",
                            "he",
                            "en_gb"
                          ],
                          "description": "The locale code (e.g., en, fr, es)."
                        },
                        "highlights": {
                          "type": "array",
                          "description": "A list of short benefit highlights in the specified locale.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "locale",
                        "highlights"
                      ]
                    }
                  },
                  "supported_countries": {
                    "type": "array",
                    "description": "A list of countries supported by the payment gateway, represented using ISO 3166-1 alpha-2 country codes.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "supported_currencies": {
                    "type": "array",
                    "description": "A list of currencies supported by the payment gateway, represented using ISO 4217 format.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "minimum_charge_amount": {
                    "type": "number",
                    "description": "The minimum value that can be charged using the payment gateway"
                  },
                  "payment_methods": {
                    "type": "object",
                    "description": "The payment methods supported by the gateway",
                    "properties": {
                      "credit_card": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports credit card payments."
                      },
                      "ach": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports ACH payments."
                      },
                      "ideal": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports iDeal payments."
                      },
                      "bancontact": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports Bancontact payments."
                      },
                      "twint": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports Twint payments."
                      }
                    }
                  },
                  "processing_features": {
                    "type": "object",
                    "description": "The features the payment gateway supports and their current state (enabled/disabled)",
                    "properties": {
                      "multi_currency": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports multi-currency transactions."
                      },
                      "back_office_charge": {
                        "type": "boolean",
                        "description": "Indicates if the gateway allows the SMB to process charges directly from the back office."
                      },
                      "checkout": {
                        "type": "boolean",
                        "description": "Indicates whether the payment gateway supports a checkout option initiated from the client portal. This value must always be set to true, as client portal checkout is a core feature."
                      },
                      "refund": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports full online refunds."
                      },
                      "partial_refund": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports partial online refunds. Requires full refunds to be enabled."
                      },
                      "client_save_card_on_checkout": {
                        "type": "boolean",
                        "description": "Indicates if clients can save cards on file during a payment flow."
                      },
                      "client_save_card_standalone": {
                        "type": "boolean",
                        "description": "Indicates if clients can save cards on file through a standalone flow."
                      },
                      "save_card_by_business": {
                        "type": "boolean",
                        "description": "Indicates if the gateway supports saving cards on file from the business side."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment gateway updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/payment_processing/payment_gateway.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a PaymentGateway",
        "description": "Delete an existing payment gateway - Available for **Application Tokens**",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the Payment Gateway",
            "schema": {
              "type": "string"
            },
            "example": "pgw_abc123def456"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment gateway deleted successfully"
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/payment_processing/payment_gateway_assignments": {
      "post": {
        "summary": "Create a PaymentGatewayAssignment",
        "description": "Assign a payment gateway to a directory - **Only available for Directory Tokens**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentGatewayAssignmentRequestDto"
              },
              "example": {
                "gateway_uid": "pgw_stripe_v2_789",
                "directory_uid": "dir_main_directory_123"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment gateway assignment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/payment_processing/paymentGatewayAssignment.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input data or assignment already exists."
          },
          "401": {
            "description": "Unauthorized. The bearer token is missing or invalid."
          },
          "403": {
            "description": "Forbidden. You do not have access to this resource."
          },
          "404": {
            "description": "Not found. Payment gateway or directory not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Payment Gateways"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/sales/reports/forecast_payments": {
      "get": {
        "summary": "Retrieve Payments Forecast Data",
        "description": "Fetch detailed data for the Payments forecast widget, providing predictions of future payments on a month-by-month basis. This endpoint is accessible with **Staff Tokens** only.",
        "responses": {
          "200": {
            "description": "Successful response containing Payments forecast data.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentsForecast"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Sales Reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentGatewayList": {
        "type": "object",
        "properties": {
          "payment_gateways": {
            "description": "List of Payment Gateways",
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/payment_processing/payment_gateway.json"
            }
          }
        }
      },
      "CreatePaymentGatewayAssignmentRequestDto": {
        "type": "object",
        "properties": {
          "gateway_uid": {
            "type": "string",
            "description": "The unique identifier of the payment gateway to assign"
          },
          "directory_uid": {
            "type": "string",
            "description": "The unique identifier of the directory to assign the payment gateway to"
          }
        },
        "required": [
          "gateway_uid",
          "directory_uid"
        ]
      },
      "PaymentsWidget": {
        "type": "object",
        "properties": {
          "total_payments_due": {
            "type": "number",
            "format": "double",
            "description": "The total outstanding amount due for payment requests"
          },
          "total_payments": {
            "type": "object",
            "properties": {
              "current_year": {
                "type": "number",
                "description": "Total payment amount collected for the current year."
              },
              "last_year": {
                "type": "string",
                "description": "Total payment amount collected in the previous year."
              }
            }
          },
          "overdue_payments_summary": {
            "type": "object",
            "properties": {
              "total_overdue": {
                "type": "string",
                "description": "The total overdue amount of payment requests."
              },
              "total_overdue_count": {
                "type": "number",
                "description": "The total number of overdue payment requests."
              },
              "last_week": {
                "type": "string",
                "description": "Total overdue payment requests amount from the last week."
              },
              "last_week_count": {
                "type": "number",
                "description": "Number of overdue payment requests from the last week."
              },
              "last_month": {
                "type": "string",
                "description": "Total overdue payment requests amount from the last month."
              },
              "last_month_count": {
                "type": "number",
                "description": "Number of overdue payment requests from the last month."
              },
              "old": {
                "type": "string",
                "description": "The total amount for overdue payment requests that are older than 30 days."
              },
              "old_count": {
                "type": "number",
                "description": "Count of older overdue payment request transactions that are older than 30 days."
              }
            }
          },
          "pending_estimates": {
            "type": "object",
            "properties": {
              "count": {
                "type": "number",
                "description": "The total count of pending payment estimates that have not yet been confirmed."
              }
            }
          }
        }
      },
      "PaymentsForecast": {
        "type": "object",
        "properties": {
          "payment_forcast": {
            "description": "An array of forecasted payment details for each month.",
            "type": "array",
            "items": {
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date representing the forecasted payment period."
                },
                "amount": {
                  "type": "number",
                  "format": "double",
                  "description": "The forecasted payment amount for the given date."
                }
              }
            }
          }
        }
      },
      "Response": {
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "Object": {
        "properties": {}
      },
      "CouponsList": {
        "type": "object",
        "properties": {
          "coupons": {
            "description": "List of Coupons",
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/sales/Coupon.json"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication"
      }
    }
  },
  "tags": []
}
