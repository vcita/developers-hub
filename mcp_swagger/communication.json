{
  "openapi": "3.1.0",
  "info": {
    "title": "Communication",
    "description": "Unified OpenAPI specification for communication domain",
    "version": "3.0",
    "x-generated": {
      "timestamp": "2025-08-16T19:32:56.614Z",
      "sourceFiles": [
        "legacy_v1_communication.json",
        "messages.json",
        "communication.json",
        "business_phone_numbers.json",
        "notification_template.json",
        "staff_notification.json",
        "activity_message.json",
        "communication.json"
      ],
      "pathNormalizations": [
        {
          "file": "legacy_v1_communication.json",
          "basePath": "/platform/v1",
          "transformations": [
            {
              "original": "/conversations",
              "normalized": "/platform/v1/conversations",
              "basePath": "/platform/v1"
            },
            {
              "original": "/messages",
              "normalized": "/platform/v1/messages",
              "basePath": "/platform/v1"
            },
            {
              "original": "/numbers/dedicated_numbers/assign",
              "normalized": "/platform/v1/numbers/dedicated_numbers/assign",
              "basePath": "/platform/v1"
            },
            {
              "original": "/numbers/dedicated_numbers/set_two_way_texting_status",
              "normalized": "/platform/v1/numbers/dedicated_numbers/set_two_way_texting_status",
              "basePath": "/platform/v1"
            },
            {
              "original": "/numbers/twilio",
              "normalized": "/platform/v1/numbers/twilio",
              "basePath": "/platform/v1"
            },
            {
              "original": "/numbers/twilio/{sub_account_id}",
              "normalized": "/platform/v1/numbers/twilio/{sub_account_id}",
              "basePath": "/platform/v1"
            }
          ]
        },
        {
          "file": "communication.json",
          "basePath": "/business/communication",
          "transformations": [
            {
              "original": "/channels",
              "normalized": "/business/communication/channels",
              "basePath": "/business/communication"
            },
            {
              "original": "/channels/{uid}",
              "normalized": "/business/communication/channels/{uid}",
              "basePath": "/business/communication"
            },
            {
              "original": "/messages",
              "normalized": "/business/communication/messages",
              "basePath": "/business/communication"
            },
            {
              "original": "/messages/{messageUid}",
              "normalized": "/business/communication/messages/{messageUid}",
              "basePath": "/business/communication"
            },
            {
              "original": "/oauth",
              "normalized": "/business/communication/oauth",
              "basePath": "/business/communication"
            },
            {
              "original": "/sessions",
              "normalized": "/business/communication/sessions",
              "basePath": "/business/communication"
            },
            {
              "original": "/sessions/typing",
              "normalized": "/business/communication/sessions/typing",
              "basePath": "/business/communication"
            },
            {
              "original": "/sessions/{uid}",
              "normalized": "/business/communication/sessions/{uid}",
              "basePath": "/business/communication"
            }
          ]
        }
      ],
      "pathConflicts": [
        {
          "path": "/v3/communication/activity_messages",
          "files": [
            "unknown",
            "activity_message.json"
          ],
          "winner": "activity_message.json",
          "resolution": "Used activity_message.json (newer modification date)",
          "timestamp": "2025-08-16T19:32:56.614Z"
        }
      ],
      "componentConflicts": [
        {
          "type": "schema",
          "name": "Response",
          "resolution": "Renamed to Response_business_phone_numbers",
          "files": [
            "merged",
            "business_phone_numbers.json"
          ]
        },
        {
          "type": "schema",
          "name": "Response",
          "resolution": "Renamed to Response_staff_notification",
          "files": [
            "merged",
            "staff_notification.json"
          ]
        },
        {
          "type": "schema",
          "name": "ErrorResponse",
          "resolution": "Renamed to ErrorResponse_activity_message",
          "files": [
            "merged",
            "activity_message.json"
          ]
        },
        {
          "type": "schema",
          "name": "Response",
          "resolution": "Renamed to Response_communication",
          "files": [
            "merged",
            "communication.json"
          ]
        }
      ],
      "totalPaths": 31,
      "totalComponents": 37
    }
  },
  "servers": [
    {
      "url": "https://api.vcita.biz",
      "description": "Unified API Gateway server"
    }
  ],
  "paths": {
    "/platform/v1/conversations": {
      "get": {
        "description": "Gets a list of conversations",
        "parameters": [
          {
            "description": "Page number of results. Default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "How many items to return per page. Default: 25. Max: 100",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Folder - Inbox / Follow-up / Sent / Archived",
            "in": "query",
            "name": "folder",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "conversations": [
                      {
                        "business_id": "2f27ca024eb96133",
                        "business_unread": false,
                        "client_id": "od0tuoli2prraw3y",
                        "client_unread": false,
                        "created_at": "2025-08-05T06:56:33.583Z",
                        "deep_link": "/app/conversations/uuk21b7xv53er6zq",
                        "id": "uuk21b7xv53er6zq",
                        "last_business_action": "",
                        "last_client_action": null,
                        "staff_id": "6ad7601fd821c8d2",
                        "title": null,
                        "updated_at": "2025-08-05T06:56:33.583Z"
                      },
                      {
                        "business_id": "2f27ca024eb96133",
                        "business_unread": false,
                        "client_id": "dn7ucrylnqxrb52l",
                        "client_unread": false,
                        "created_at": "2025-08-05T06:56:34.629Z",
                        "deep_link": "/app/conversations/lzth35ivm33uo073",
                        "id": "lzth35ivm33uo073",
                        "last_business_action": "",
                        "last_client_action": null,
                        "staff_id": "6ad7601fd821c8d2",
                        "title": null,
                        "updated_at": "2025-08-05T06:56:34.629Z"
                      }
                    ]
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Conversations",
        "tags": [
          "Conversations"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/conversations"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/messages": {
      "get": {
        "description": "Gets a list of messages for a conversation",
        "parameters": [
          {
            "description": "Conversation ID",
            "in": "query",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number of results. Default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "How many items to return per page. Default: 25. Max: 100",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "messages": []
                  },
                  "status": "OK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get Messages",
        "tags": [
          "Messages"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "GET",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/messages"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/numbers/dedicated_numbers/assign": {
      "post": {
        "description": "Assign Dedicated Number For Account, This API requires the 'enable_dedicated_nexmo_number' feature flag to be enabled on your account/directory. For additional information please reach out to our support.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": true,
                    "success": true
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Assign Dedicated Number",
        "tags": [
          "Manage Numbers"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/numbers/dedicated_numbers/assign"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "api_key": {
                    "type": "string"
                  },
                  "business_uid": {
                    "type": "string"
                  },
                  "number": {
                    "type": "string"
                  },
                  "number_type": {
                    "description": "[\"promotional\",\"transactional\"]",
                    "type": "string"
                  }
                },
                "required": [
                  "number",
                  "number_type",
                  "api_key"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/numbers/dedicated_numbers/set_two_way_texting_status": {
      "put": {
        "description": "Set Two Way Texting Status",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "inactive",
                    "success": true
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Set Two Way Texting Status",
        "tags": [
          "Manage Numbers"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "PUT",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/numbers/dedicated_numbers/set_two_way_texting_status"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/platform/v1/numbers/twilio": {
      "post": {
        "description": "translation missing: en.messaging-api.twilio.index.post.descriptionn",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "business_uid": "123asd123asd",
                      "messaging_id": "123abc",
                      "number": "123456789",
                      "sub_account_id": "123aaa"
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "translation missing: en.messaging-api.twilio.index.post.titlee",
        "tags": [
          "Manage Numbers"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/numbers/twilio"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "business_uid": {
                    "type": "string"
                  },
                  "messaging_id": {
                    "type": "string"
                  },
                  "number": {
                    "type": "string"
                  },
                  "sub_account_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "business_uid",
                  "number",
                  "messaging_id",
                  "sub_account_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/platform/v1/numbers/twilio/{sub_account_id}": {
      "delete": {
        "description": "Remove Twilio Number",
        "parameters": [
          {
            "description": "Sub Account ID",
            "in": "path",
            "name": "sub_account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "business_uid": "123asd123asd",
                      "messaging_id": "123abc",
                      "number": "123456789"
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Remove Twilio Number",
        "tags": [
          "Manage Numbers"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "DELETE",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "type": "http_proxy",
          "uri": "https:///platform/v1/numbers/twilio/{sub_account_id}"
        },
        "x-auth-type": "Application & Application User"
      }
    },
    "/v1/channels": {
      "post": {
        "description": "Connecting a business to primitive messaging channel through knowen providers (Supports only nexmo)",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "channel": {
                      "business_uid": "Business UID",
                      "country_code": "Alpha 2 country code",
                      "number": "The claimed (Nexmo)",
                      "provider": "The provider",
                      "status": "Number status"
                    },
                    "success": "true / false"
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a mesaging channel",
        "tags": [
          "Messaging Channels"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/messaging/v1/channels"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "properties": {
                      "params": {
                        "description": "landline number - Not required",
                        "properties": {
                          "number": {
                            "description": "landline number - Not required",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "provider": {
                        "description": "nexmo",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v1/channels/typing": {
      "post": {
        "description": "Notify contacts about account typing indicator.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": {
                      "data": {
                        "typing": "true / false"
                      },
                      "success": "true / false"
                    },
                    "success": true
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Notify Typing Indicator",
        "tags": [
          "Typing Indicator"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///business/messaging/v1/channels/typing"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "contact": {
                    "properties": {
                      "channel_uid": {
                        "type": "string"
                      },
                      "external_uid": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      },
                      "typing": {
                        "type": "boolean"
                      },
                      "uid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v3/communication/activity_messages": {
      "post": {
        "operationId": "sendActivityMessage",
        "summary": "Create an ActivityMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "business_uid": {
                    "type": "string",
                    "description": "The unique identifier of the business that is sending the message"
                  },
                  "staff_uid": {
                    "type": "string",
                    "description": "The unique identifier of the staff that is sending the message"
                  },
                  "client_uid": {
                    "type": "string",
                    "description": "The unique identifier of the client the message is sent to"
                  },
                  "activity_type": {
                    "type": "string",
                    "enum": [
                      "invite"
                    ],
                    "description": "Activity category type from a closed list."
                  },
                  "activity_action": {
                    "type": "string",
                    "enum": [
                      "schedule"
                    ],
                    "description": "Action related to the activity type property."
                  },
                  "channels": {
                    "type": "array",
                    "description": "Determines if the message should be sent via email or/and SMS.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms"
                      ]
                    }
                  },
                  "message_text": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The main content of the message."
                      },
                      "subject": {
                        "type": "string",
                        "description": "A summary of the message content (limited to 200 characters)"
                      }
                    }
                  },
                  "cta_button_text": {
                    "type": "string",
                    "description": "In the Email, this text will appear on the button embedded in the email message"
                  },
                  "link_url_params": {
                    "type": "object",
                    "description": "The parameters for the Email action button or SMS link. for example: {\n\"utm_source\": \"newsletter\",\n\"utm_campaign\": \"summer_sale\"\n}"
                  }
                },
                "required": [
                  "client_uid",
                  "activity_type",
                  "activity_action",
                  "channels"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/activityMessage.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error. The request is invalid. (missing required fields, invalid values, etc.)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "missing_field",
                      "message": "Missing mandatory field."
                    },
                    {
                      "code": "invalid",
                      "message": "activity_type value is invalid."
                    },
                    {
                      "code": "too_long",
                      "message": "Sms body text is too long. Maximum length is 550 characters."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The bearer token is missing, invalid or not allowed to access the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "unauthorized",
                      "message": "401 Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The requested resource was not found. (staff, client or business)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": "Client Not Found: The specified client ID does not exist."
                }
              }
            }
          },
          "429": {
            "description": "Rate Limit Reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "too_many_requests",
                      "message": "Rate limit exceeded"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Activity Message"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/messaging/activity_message": {
      "post": {
        "description": "Deliver activity messages through sms/email",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "activityMessage": {
                      "activity_action": "schedule",
                      "activity_type": "invite",
                      "business_uid": "e2a1s1aqysc2yq14",
                      "channels": [
                        "sms"
                      ],
                      "client_uid": "peu8ljecwqr5ok58",
                      "created_at": "2024-07-01T13:35:29.000+03:00",
                      "cta_button_text": "Schedule now",
                      "message_text": {
                        "body": "You are invited to schedule with us online.",
                        "subject": "You can now schedule with us online!"
                      },
                      "message_uid": "zx0pltyoilo16ghu",
                      "staff_uid": "ro18nfcfw7pod2yy",
                      "updated_at": "2024-07-01T13:35:29.000+03:00"
                    }
                  },
                  "success": true
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Send activity message api",
        "tags": [
          "Activity Message"
        ],
        "x-amazon-apigateway-auth": {
          "type": "NONE"
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "responses": {
            "default": {
              "statusCode": "201"
            }
          },
          "type": "http_proxy",
          "uri": "https:///v3/messaging/activity_message"
        },
        "x-auth-type": "Application & Application User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "activity_action": {
                    "description": "Action related to the activity type property.",
                    "type": "string"
                  },
                  "activity_type": {
                    "description": "Activity category type from a closed list.",
                    "type": "string"
                  },
                  "business_uid": {
                    "description": "The business that is sending the message.",
                    "type": "string"
                  },
                  "channels": {
                    "description": "Determines in which communication channel to send the message",
                    "type": "object"
                  },
                  "client_uid": {
                    "description": "Client to send the message to.",
                    "type": "string"
                  },
                  "cta_button_text": {
                    "description": "The text for the Email action button",
                    "type": "string"
                  },
                  "message_text": {
                    "properties": {
                      "body": {
                        "description": "The main content of the message.",
                        "type": "string"
                      },
                      "subject": {
                        "description": "A concise summary of the message content.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "message_uid": {
                    "description": "The entity's unique identifier.",
                    "type": "string"
                  },
                  "staff_uid": {
                    "description": "The staff that is sending the message.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/business/communication/channels": {
      "post": {
        "description": "Create a new business' communication channel",
        "operationId": "ChannelsController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Channel has been successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ChannelResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelDto"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/channels/{uid}": {
      "delete": {
        "description": "Deletes an existing channel.",
        "operationId": "ChannelsController_deleteChannel",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BaseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Update an existing communication channel.",
        "operationId": "ChannelsController_updateChannel",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BaseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/messages": {
      "post": {
        "description": "Send a message to a business",
        "operationId": "MessagesController_createMessage",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Message sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessageResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageDto"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/messages/{messageUid}": {
      "put": {
        "description": "Update message status.",
        "operationId": "MessagesController_updateStatus",
        "parameters": [
          {
            "in": "path",
            "name": "messageUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BaseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageDto"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/oauth": {
      "get": {
        "operationId": "OauthController_generateOauthToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "oauth"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/sessions": {
      "get": {
        "description": "Deep object style. Exmaple: filter[channel_uid]=channeluuid",
        "operationId": "SessionsController_getSession",
        "parameters": [
          {
            "description": "Channel  identifier",
            "in": "query",
            "name": "channel_uid",
            "required": true,
            "x-example": "c697a91c-ce0c-469e-918b-fdc2ff6f8a04",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Business identifier",
            "in": "query",
            "name": "business_uid",
            "required": true,
            "x-example": "5wbdaiig4avpwl40",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "vCita contanct identifier",
            "in": "query",
            "name": "contact_uid",
            "required": false,
            "x-example": "2nbreiig9avawl81",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions of specific channel (can be filtered by contact_uid)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiSessionResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "* Required query params",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Create a new inactive session over a channel between the app's contact and vCita's contact.",
        "operationId": "SessionsController_createSession",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Session created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SessionResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/sessions/typing": {
      "post": {
        "description": "Populate typing indicator status.",
        "operationId": "SessionsTypingController_typingStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BaseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/business/communication/sessions/{uid}": {
      "delete": {
        "description": "Deletes an existing session.",
        "operationId": "SessionsController_logicDelete",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BaseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Activating/deactivating an existing session.",
        "operationId": "SessionsController_updateStatus",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session activation request received successfully. Once change has occurred, the App will receive an API request confirming the status change.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SessionResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionDto"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/available_phone_numbers": {
      "get": {
        "operationId": "AvailablePhoneNumbersController_findAll",
        "summary": "Retrieve All AvailablePhoneNumbers",
        "description": "Retrieves a list of phone numbers available for purchase from telecom providers.\nAvailable for Directory tokens",
        "parameters": [
          {
            "name": "country_code",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ISO 3166-1 alpha-2 country code (e.g., \"US\", \"CA\", \"GB\", \"AU\")"
          },
          {
            "name": "area_code",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by area code (e.g., \"302\"). Required if country_code is \"US\"."
          },
          {
            "name": "features",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "SMS"
                ]
              }
            },
            "description": "Filter by telephony features (e.g., [\"VOICE\", \"SMS\"])."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number of results.",
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "How many items to return per page. Max: 100",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Available phone numbers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiAvailablePhoneNumberResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid query parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "tags": [
          "Available Phone Numbers"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/business_phone_numbers": {
      "post": {
        "operationId": "BusinessPhoneNumbersController_create",
        "summary": "Create a BusinessPhoneNumber",
        "description": "Purchase a phone number from a telecom provider and assign it to a business account. \nAvailable for Directory tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessPhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business phone number created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/businessPhoneNumber.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "409": {
            "description": "Conflict - Phone number already exists or is not available"
          }
        },
        "tags": [
          "Business Phone Numbers"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "operationId": "BusinessPhoneNumbersController_findAll",
        "summary": "Retrieve all BusinessPhoneNumbers",
        "description": "Retrieves a list of all business phone numbers associated with a business account.\nAvailable for Directory tokens",
        "responses": {
          "200": {
            "description": "List of business phone numbers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiBusinessPhoneNumberResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "tags": [
          "Business Phone Numbers"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/business_phone_numbers/{uid}": {
      "get": {
        "operationId": "BusinessPhoneNumbersController_findOne",
        "summary": "Retrieve a BusinessPhoneNumber",
        "description": "Fetches detailed information about a single business phone number using its unique identifier.\nAvailable for Directory tokens",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the business phone number"
          }
        ],
        "responses": {
          "200": {
            "description": "Business phone number retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/businessPhoneNumber.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not found - Business phone number not found"
          }
        },
        "tags": [
          "Business Phone Numbers"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/notification_templates": {
      "get": {
        "summary": "Get all NotificationTemplates",
        "description": "Get a list of NotificationTemplates. Available for Directory and App tokens.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number of results.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "How many items to return per page. Max: 100",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 25,
              "type": "number"
            }
          },
          {
            "description": "Sort by fields. Example: sort=created_at:asc,updated_at:desc",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "updated_at:desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "notification_templates": {
                              "description": "List of NotificationTemplates",
                              "type": "array",
                              "items": {
                                "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Notification Templates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a NotificationTemplate",
        "description": "Create a new notification template. Available for Directory and App tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code_name": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/code_name"
                  },
                  "title": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/title"
                  },
                  "description": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/description"
                  },
                  "category": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/category"
                  },
                  "configurable_by_staff": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/configurable_by_staff"
                  },
                  "content": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/content"
                  }
                },
                "required": [
                  "code_name",
                  "title",
                  "description",
                  "category",
                  "configurable_by_staff",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "NotificationTemplate created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "validation_error",
                      "message": "The request contains invalid data"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Notification Templates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/notification_templates/{uid}": {
      "get": {
        "summary": "Retrieve a NotificationTemplate",
        "description": "Retrieve a specific NotificationTemplate based on its unique identifier (UID). Available for Directory and App tokens.",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the NotificationTemplate",
            "schema": {
              "type": "string"
            },
            "example": "notif-001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "NotificationTemplate not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "not_found",
                      "message": "Notification template not found"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Notification Templates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update a NotificationTemplate",
        "description": "Update an existing notification template. Available for Directory and App tokens.",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the NotificationTemplate",
            "schema": {
              "type": "string"
            },
            "example": "notif-001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/title"
                  },
                  "description": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/description"
                  },
                  "category": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/category"
                  },
                  "configurable_by_staff": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/configurable_by_staff"
                  },
                  "content": {
                    "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json#/properties/content"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "NotificationTemplate updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/notificationTemplate.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "validation_error",
                      "message": "The request contains invalid data"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "NotificationTemplate not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "not_found",
                      "message": "Notification template not found"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Notification Templates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a NotificationTemplate",
        "description": "Delete a specific NotificationTemplate based on its unique identifier (UID). Available for Directory and App tokens.",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the NotificationTemplate",
            "schema": {
              "type": "string"
            },
            "example": "notif-001"
          }
        ],
        "responses": {
          "200": {
            "description": "NotificationTemplate deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Notification template deleted successfully"
                }
              }
            }
          },
          "404": {
            "description": "NotificationTemplate not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    }
                  ]
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "code": "not_found",
                      "message": "Notification template not found"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Notification Templates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/staff_notifications": {
      "post": {
        "summary": "Create a StaffNotification",
        "description": "Create a new StaffNotification for a staff member\n\n**Available for Directory or App Token.**",
        "tags": [
          "Staff Notification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffNotificationCreate"
              },
              "example": {
                "staff_uid": "staff-67890",
                "notification_template_code_name": "new_appointment_created",
                "locale": "en",
                "params": [
                  {
                    "key": "client_name",
                    "value": "John Doe"
                  },
                  {
                    "key": "appointment_time",
                    "value": "2023-05-15T14:30:00Z"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Staff notification created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/staff_notifications/{uid}": {
      "get": {
        "summary": "Retrieve a StaffNotification",
        "description": "Retrieve a StaffNotification by its unique identifier\n\n**Available for Directory or App Token.**",
        "tags": [
          "Staff Notification"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the StaffNotification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StaffNotification retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Staff notification not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_call_settings": {
      "post": {
        "operationId": "SettingsController_create",
        "summary": "Create a VoiceCallSetting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCallSetting.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call Settings"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SettingsController_get",
        "summary": "Get all VoiceCallSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiResponseEntity"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call Settings"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_call_settings/{uid}": {
      "put": {
        "operationId": "SettingsController_update",
        "summary": "Update VoiceCallSetting",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCallSetting.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call Settings"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_calls": {
      "get": {
        "operationId": "VoiceCallsController_getAll",
        "summary": "Get all VoiceCalls",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number of results.",
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "How many items to return per page. Max: 100",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 25,
              "type": "number"
            }
          },
          {
            "description": "Sort by fields. Example: sort=created_at:asc,updated_at:desc",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "updated_at:desc",
              "type": "string"
            }
          },
          {
            "description": "Filter by a field. Example: filter[created_at][gt]=2019-01-01, filter[name]=my-name",
            "required": false,
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiVoiceCallResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "operationId": "VoiceCallsController_create",
        "summary": "Create a VoiceCall",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoiceCall"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCall.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_calls/{uid}": {
      "get": {
        "operationId": "VoiceCallsController_get",
        "summary": "Retrieve a VoiceCall",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCall.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "operationId": "VoiceCallsController_update",
        "summary": "Update a VoiceCall",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVoiceCall"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCall.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_call_recordings/{uid}": {
      "delete": {
        "operationId": "RecordingsController_deleteVoiceCallRecording",
        "summary": "Delete a VoiceCallRecording",
        "description": "Deletes a voice call recording and returns a voiceCall entity",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voiceCall entity",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCall.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call Recordings"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/communication/voice_call_quotas": {
      "get": {
        "operationId": "QuotasController_getQuota",
        "summary": "Retrieve a VoiceCallQuota",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Response"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MultiQuotaResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Voice Call Quota"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BaseDto": {
        "properties": {},
        "type": "object"
      },
      "ChannelResponseDto": {
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChannelResponseEntity"
          }
        },
        "required": [
          "channel"
        ],
        "type": "object"
      },
      "ChannelResponseEntity": {
        "properties": {
          "display_name": {
            "description": "Channel display name.",
            "type": "string"
          },
          "status": {
            "description": "Channel status. Enum ChannelStatus.",
            "enum": [
              "pending",
              "active",
              "inactive",
              "deleted",
              "blocked",
              "error"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Channel uid. 36 chars uuid, this is the identifier for the created channel.",
            "type": "string"
          }
        },
        "required": [
          "uid",
          "status",
          "display_name"
        ],
        "type": "object"
      },
      "CreateChannelDto": {
        "properties": {
          "business_uid": {
            "description": "Business uid. 16 business identifier for which the channel will be created for.",
            "type": "string"
          },
          "display_name": {
            "description": "channel display name..",
            "type": "string"
          },
          "type": {
            "description": "Type of channel. Enum ChannelType.",
            "enum": [
              "transactional",
              "promotional"
            ],
            "type": "string"
          }
        },
        "required": [
          "business_uid",
          "type"
        ],
        "type": "object"
      },
      "CreateMessageDto": {
        "properties": {
          "attachments": {
            "description": "Message attachments",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "channel_uid": {
            "description": "Channel uid. 36 chars uuid.",
            "type": "string"
          },
          "contact_uid": {
            "description": "Contact Uid",
            "type": "string"
          },
          "created_at": {
            "description": "Message creation date time [optional | Format: YYYY-MM-DD HH:MM:SS].",
            "type": "string"
          },
          "direction": {
            "description": "Message Direction.",
            "enum": [
              "client_to_business",
              "business_to_client"
            ],
            "type": "string"
          },
          "external_uid": {
            "description": "Paired contact code.",
            "type": "string"
          },
          "message": {
            "description": "Message content.",
            "type": "string"
          },
          "message_uid": {
            "description": "Message uid. Max 255 chars identifier. vCita will send message status updates based on this identifier.Must be unique per channel.",
            "type": "string"
          }
        },
        "required": [
          "external_uid",
          "message",
          "message_uid",
          "channel_uid"
        ],
        "type": "object"
      },
      "CreateSessionDto": {
        "properties": {
          "business_uid": {
            "description": "16 chars business identifier.",
            "type": "string"
          },
          "channel_uid": {
            "description": "36 chars channel identifier.",
            "type": "string"
          },
          "contact_uid": {
            "description": "vCita contact identifier.",
            "type": "string"
          },
          "external_uid": {
            "description": "App's contact identifier.",
            "type": "string"
          }
        },
        "required": [
          "business_uid",
          "channel_uid",
          "contact_uid",
          "external_uid"
        ],
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/StandardError"
            },
            "type": "array"
          },
          "success": {
            "default": false,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "errors"
        ],
        "type": "object"
      },
      "MessageResponseDto": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/MessageResponseEntity"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "MessageResponseEntity": {
        "properties": {
          "status": {
            "description": "Message status. Enum MessageStatus.",
            "enum": [
              "pending",
              "channel_pending",
              "sent",
              "received",
              "read",
              "error",
              "unavailable"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Message uid",
            "type": "string"
          }
        },
        "required": [
          "uid",
          "status"
        ],
        "type": "object"
      },
      "MultiSessionResponseDto": {
        "properties": {
          "sessions": {
            "items": {
              "$ref": "#/components/schemas/SessionResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "sessions"
        ],
        "type": "object"
      },
      "Response": {
        "properties": {
          "data": {
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "data"
        ],
        "type": "object"
      },
      "SessionResponse": {
        "properties": {
          "status": {
            "description": "Session status. Enum SessionStatus.",
            "enum": [
              "pending",
              "inactive",
              "active"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Session uid",
            "type": "string"
          }
        },
        "required": [
          "uid",
          "status"
        ],
        "type": "object"
      },
      "SessionResponseDto": {
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionResponse"
          }
        },
        "required": [
          "session"
        ],
        "type": "object"
      },
      "StandardError": {
        "properties": {
          "code": {
            "enum": [
              "missing",
              "missing_field",
              "invalid",
              "already_exists",
              "duplicate",
              "too_long",
              "unexpected",
              "unauthorized",
              "timeout"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "code"
        ],
        "type": "object"
      },
      "UpdateMessageDto": {
        "properties": {
          "channel_uid": {
            "description": "Channel uid of the message.",
            "type": "string"
          },
          "status": {
            "description": "Message's new status. Enum MessageStatus",
            "enum": [
              "pending",
              "channel_pending",
              "sent",
              "received",
              "read",
              "error",
              "unavailable"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "channel_uid"
        ],
        "type": "object"
      },
      "UpdateSessionDto": {
        "properties": {
          "status": {
            "description": "Session status. Enum SessionStatus.",
            "enum": [
              "pending",
              "inactive",
              "active"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "Response_business_phone_numbers": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MultiAvailablePhoneNumberResponse": {
        "type": "object",
        "properties": {
          "available_phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/communication/availablePhoneNumber.json"
            }
          }
        },
        "required": [
          "available_phone_numbers"
        ]
      },
      "CreateBusinessPhoneNumberRequest": {
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The complete phone number in E.164 format without formatting (e.g., \"12127654321\"). This is the actual phone number to be purchased from the telecom provider."
          },
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code indicating the country where the phone number is registered (e.g., \"US\" for United States, \"CA\" for Canada)."
          },
          "features": {
            "type": "array",
            "description": "List of telephony features to enable for this phone number, (e.g., [\"VOICE\", \"SMS\"]).",
            "items": {
              "type": "string",
              "enum": [
                "VOICE",
                "SMS"
              ]
            }
          }
        },
        "required": [
          "phone_number",
          "country_code",
          "features"
        ]
      },
      "MultiBusinessPhoneNumberResponse": {
        "type": "object",
        "properties": {
          "business_phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/communication/businessPhoneNumber.json"
            }
          }
        },
        "required": [
          "business_phone_numbers"
        ]
      },
      "StaffNotificationCreate": {
        "type": "object",
        "required": [
          "staff_uid",
          "notification_template_code_name"
        ],
        "properties": {
          "staff_uid": {
            "type": "string",
            "description": "The unique identifier of the staff member associated with this StaffNotification."
          },
          "notification_template_code_name": {
            "type": "string",
            "description": "The code name identifying the notification template to be used."
          },
          "locale": {
            "type": "string",
            "description": "The language locale for the notification content.",
            "enum": [
              "en",
              "fr",
              "de",
              "it",
              "pl",
              "pt",
              "es",
              "nl",
              "he",
              "sl",
              "en_gb"
            ],
            "default": "en"
          },
          "params": {
            "type": "array",
            "description": "Additional parameters for populating notification templates.",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The parameter name."
                },
                "value": {
                  "type": "string",
                  "description": "The parameter value."
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          }
        }
      },
      "StaffNotificationUpdate": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "array",
            "description": "The current statuses of the staff notification.",
            "items": {
              "type": "string",
              "enum": [
                "processed",
                "dropped",
                "deferred",
                "bounce",
                "delivered",
                "open",
                "click",
                "spam_report",
                "unsubscribe"
              ]
            }
          }
        }
      },
      "Response_staff_notification": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the API request was successful",
            "example": true
          },
          "data": {
            "$ref": "https://vcita.github.io/developers-hub/entities/communication/staff_notification.json",
            "description": "The StaffNotification entity data"
          }
        }
      },
      "ErrorResponse_activity_message": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "Response_communication": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ResponseEntity": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The unique identifier of the setting"
          },
          "business_uid": {
            "type": "string",
            "description": "The unique identifier of the business"
          },
          "staff_uid": {
            "type": "string",
            "description": "The unique identifier of the staff"
          },
          "forwarding_enabled": {
            "type": "string",
            "description": "Whether or not forwarding to the staff is enabled"
          },
          "forward_number": {
            "type": "string",
            "description": "The number to forward to"
          },
          "dedicated_number": {
            "type": "string",
            "description": "The dedicated number"
          },
          "call_forwarding_policy": {
            "type": "string",
            "description": "The call forwarding policy"
          },
          "call_timeout_sec": {
            "type": "number",
            "description": "The call timeout in seconds"
          },
          "external_app_name": {
            "type": "string",
            "description": "The external app name"
          },
          "app_status": {
            "type": "string",
            "description": "The status of the app"
          }
        },
        "required": [
          "uid",
          "business_uid",
          "staff_uid",
          "external_app_name",
          "app_status"
        ]
      },
      "VoiceScriptsDto": {
        "type": "object",
        "properties": {}
      },
      "RequestDto": {
        "type": "object",
        "properties": {
          "staff_uid": {
            "type": "string",
            "description": "The staff uid"
          },
          "forward_number": {
            "type": "string",
            "description": "The number to forward calls to"
          },
          "staff_weekly_availability_uid": {
            "type": "string",
            "description": "The staff weekly availability uid"
          },
          "forwarding_enabled": {
            "type": "boolean",
            "description": "Whether forwarding calls to the staff is enabled"
          },
          "dedicated_number": {
            "type": "string",
            "description": "The dedicated number"
          },
          "call_forwarding_policy": {
            "type": "string",
            "description": "The call forwarding policy"
          },
          "call_timeout_sec": {
            "type": "number",
            "description": "Seconds until the call times out"
          },
          "voice_scripts": {
            "description": "The voice scripts",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoiceScriptsDto"
              }
            ]
          },
          "external_app_name": {
            "type": "string",
            "description": "The external app name"
          },
          "app_status": {
            "type": "string",
            "description": "The app's status"
          }
        },
        "required": [
          "staff_uid",
          "forward_number",
          "staff_weekly_availability_uid",
          "forwarding_enabled",
          "dedicated_number",
          "call_forwarding_policy",
          "call_timeout_sec",
          "voice_scripts",
          "external_app_name",
          "app_status"
        ]
      },
      "UpdateRequestDto": {
        "type": "object",
        "properties": {
          "staff_uid": {
            "type": "string",
            "description": "The staff uid"
          },
          "forward_number": {
            "type": "string",
            "description": "The number to forward calls to"
          },
          "staff_weekly_availability_uid": {
            "type": "string",
            "description": "The staff weekly availability uid"
          },
          "forwarding_enabled": {
            "type": "boolean",
            "description": "Whether forwarding calls to the staff is enabled"
          },
          "dedicated_number": {
            "type": "string",
            "description": "The dedicated number"
          },
          "call_forwarding_policy": {
            "type": "string",
            "description": "The call forwarding policy"
          },
          "call_timeout_sec": {
            "type": "number",
            "description": "Seconds until the call times out"
          },
          "voice_scripts": {
            "description": "The voice scripts",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoiceScriptsDto"
              }
            ]
          },
          "external_app_name": {
            "type": "string",
            "description": "The external app name"
          },
          "app_status": {
            "type": "string",
            "description": "The app's status"
          }
        },
        "required": [
          "staff_uid",
          "forward_number",
          "staff_weekly_availability_uid",
          "forwarding_enabled",
          "dedicated_number",
          "call_forwarding_policy",
          "call_timeout_sec",
          "voice_scripts",
          "external_app_name",
          "app_status"
        ]
      },
      "MultiResponseEntity": {
        "type": "object",
        "properties": {
          "voice_call_settings": {
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCallSetting.json"
            }
          }
        },
        "required": [
          "voice_call_settings"
        ]
      },
      "ResponseDto": {
        "type": "object",
        "properties": {}
      },
      "VoiceCallResponseDto": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The entity uid"
          },
          "deleted_at": {
            "type": "boolean",
            "description": "Whether or not a voice call is deleted"
          },
          "staff_uid": {
            "type": "string",
            "description": "The uid belonging to the staff who gets/performs the call"
          },
          "client_uid": {
            "type": "string",
            "description": "The uid belonging to the client who gets/performs the call"
          },
          "duration": {
            "type": "number",
            "description": "The duration of the call"
          },
          "from_number": {
            "type": "string",
            "description": "The id of the number the call is from"
          },
          "to_number": {
            "type": "string",
            "description": "The id of the number the call is to"
          },
          "direction": {
            "type": "string",
            "description": "The direction of the call",
            "enum": [
              "INBOUND",
              "OUTBOUND"
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the call",
            "enum": [
              "INCOMING_CALL",
              "ANSWERED_BY_STAFF",
              "MISSED",
              "ANSWERED_BY_CALLS_PROVIDER"
            ]
          },
          "call_summary": {
            "type": "string",
            "description": "The call summary"
          },
          "external_app_url": {
            "type": "string",
            "description": "The external app link"
          },
          "external_app_name": {
            "type": "string",
            "description": "The external app name"
          },
          "recording": {
            "description": "The call recording details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseDto"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The creation date and time of the call"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The last updated date and time of the call"
          },
          "source_id": {
            "type": "string",
            "description": "The call source id"
          },
          "external_uuid": {
            "type": "string",
            "description": "The external call conversation uuid"
          }
        },
        "required": [
          "uid",
          "deleted_at",
          "staff_uid",
          "client_uid",
          "duration",
          "from_number",
          "to_number",
          "direction",
          "status",
          "call_summary",
          "external_app_url",
          "external_app_name",
          "recording",
          "created_at",
          "updated_at",
          "source_id",
          "external_uuid"
        ]
      },
      "MultiVoiceCallResponseDto": {
        "type": "object",
        "properties": {
          "voice_calls": {
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCall.json"
            }
          }
        },
        "required": [
          "voice_calls"
        ]
      },
      "UpdateVoiceCall": {
        "type": "object",
        "properties": {
          "staff_uid": {
            "type": "string",
            "description": "The staff uid"
          },
          "client_uid": {
            "type": "string",
            "description": "The client uid"
          },
          "from_number": {
            "type": "string",
            "description": "The id of the number the call is from"
          },
          "to_number": {
            "type": "string",
            "description": "The id of the number the call is to"
          },
          "direction": {
            "type": "string",
            "description": "The direction of the call",
            "enum": [
              "INBOUND",
              "OUTBOUND"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "INCOMING_CALL",
              "ANSWERED_BY_STAFF",
              "MISSED",
              "ANSWERED_BY_CALLS_PROVIDER"
            ],
            "description": "The status of the call"
          },
          "rate": {
            "type": "string",
            "description": "The price rate of the call"
          },
          "price": {
            "type": "string",
            "description": "The call total price"
          },
          "provider": {
            "type": "string",
            "description": "The call provider",
            "enum": [
              "VONAGE"
            ]
          },
          "source_id": {
            "type": "string",
            "description": "The source id of the call"
          },
          "duration": {
            "type": "number",
            "description": "The duration of the call"
          },
          "call_summary": {
            "type": "string",
            "description": "The summary of the call"
          },
          "external_app_url": {
            "type": "string",
            "description": "The external app link of the call"
          },
          "external_app_name": {
            "type": "string",
            "description": "The external app name"
          },
          "recording_id": {
            "type": "string",
            "description": "The UID of the call recording"
          },
          "external_uuid": {
            "type": "string",
            "description": "The external uuid of the call"
          }
        },
        "required": [
          "staff_uid",
          "client_uid",
          "from_number",
          "to_number",
          "direction",
          "status",
          "rate",
          "price",
          "provider",
          "source_id",
          "duration",
          "call_summary",
          "external_app_url",
          "external_app_name",
          "recording_id",
          "external_uuid"
        ]
      },
      "CreateVoiceCall": {
        "type": "object",
        "properties": {
          "staff_uid": {
            "type": "string",
            "description": "The staff uid"
          },
          "client_uid": {
            "type": "string",
            "description": "The client uid"
          },
          "from_number": {
            "type": "string",
            "description": "The id of the number the call is from"
          },
          "to_number": {
            "type": "string",
            "description": "The id of the number the call is to"
          },
          "direction": {
            "type": "string",
            "description": "The direction of the call",
            "enum": [
              "INBOUND",
              "OUTBOUND"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "INCOMING_CALL",
              "ANSWERED_BY_STAFF",
              "MISSED",
              "ANSWERED_BY_CALLS_PROVIDER"
            ],
            "description": "The status of the call"
          },
          "rate": {
            "type": "string",
            "description": "The price rate of the call"
          },
          "provider": {
            "type": "string",
            "description": "The call provider",
            "enum": [
              "VONAGE"
            ]
          },
          "source_id": {
            "type": "string",
            "description": "The source id of the call"
          },
          "external_uuid": {
            "type": "string",
            "description": "The external uuid of the call"
          },
          "business_uid": {
            "type": "string",
            "description": "The uid of the business to which the call belongs"
          }
        },
        "required": [
          "staff_uid",
          "client_uid",
          "from_number",
          "to_number",
          "direction",
          "status",
          "rate",
          "provider",
          "source_id",
          "external_uuid",
          "business_uid"
        ]
      },
      "QuotaResponseData": {
        "type": "object",
        "properties": {
          "business_uid": {
            "type": "string",
            "description": "The business uid the quota is related to"
          },
          "credit": {
            "type": "number",
            "description": "The credit of the quota"
          },
          "balance": {
            "type": "number",
            "description": "The amount used from the credit"
          },
          "source": {
            "type": "string",
            "description": "The source of the quota"
          }
        },
        "required": [
          "business_uid",
          "credit",
          "balance",
          "source"
        ]
      },
      "MultiQuotaResponseDto": {
        "type": "object",
        "properties": {
          "voice_call_quotas": {
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/communication/voiceCallQuota.json"
            }
          }
        },
        "required": [
          "voice_call_quotas"
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication"
      }
    }
  },
  "tags": [
    {
      "description": "",
      "name": "communicationgw"
    },
    {
      "name": "Business Phone Numbers",
      "description": "Operations for managing business phone numbers"
    }
  ]
}
