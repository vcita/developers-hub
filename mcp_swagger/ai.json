{
  "openapi": "3.0.0",
  "info": {
    "title": "Ai",
    "description": "Unified OpenAPI specification for ai domain",
    "version": "3.0",
    "x-generated": {
      "timestamp": "2025-08-16T13:18:54.966Z",
      "sourceFiles": [
        "staff_ai_settings.json",
        "recommendations.json",
        "scheduling_agent.json",
        "sales_agent.json",
        "bizai.json"
      ],
      "pathNormalizations": [],
      "pathConflicts": [],
      "componentConflicts": [],
      "totalPaths": 9,
      "totalComponents": 18
    }
  },
  "servers": [
    {
      "url": "https://api.vcita.biz",
      "description": "Unified API Gateway server"
    }
  ],
  "paths": {
    "/v3/ai/staff_ai_settings/{staff_uid}": {
      "get": {
        "tags": [
          "Staff AI Settings"
        ],
        "summary": "Retrieve a StaffAiSettings",
        "description": "Retrieve a specific StaffAiSettings based on staff unique identifier.\n\n**Available for Staff tokens only** - Users can only access their own settings.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the staff member",
            "example": "f390f1ee-6c54-4b01-90e6-d701748f0852"
          }
        ],
        "responses": {
          "200": {
            "description": "Staff AI settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/staffAiSettings.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You can only access your own settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Staff AI Settings"
        ],
        "summary": "Update a StaffAiSettings",
        "description": "Update AI settings for a specific staff member based on their unique identifier.\n\n**Available for Staff tokens only** - Users can only update their own settings.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the staff member",
            "example": "f390f1ee-6c54-4b01-90e6-d701748f0852"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffAiSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff AI settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/staffAiSettings.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid setting key or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You can only update your own settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/ai/ai_recommendations": {
      "get": {
        "tags": [
          "AI Recommendations"
        ],
        "summary": "Get all AIRecommendations",
        "description": "Retrieve a list of AIRecommendations with optional filtering by status, target, and context. **Available for Staff tokens**",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by recommendation status."
          },
          {
            "name": "target",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by target actor UID."
          },
          {
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by context UID."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of AIRecommendations",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/AIRecommendationList"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AI Recommendations"
        ],
        "summary": "Create an AIRecommendation",
        "description": "Create a new AIRecommendation. **Available for Staff tokens**",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AIRecommendation created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v3/ai/ai_recommendations/{uid}": {
      "get": {
        "tags": [
          "AI Recommendations"
        ],
        "summary": "Get an AIRecommendation",
        "description": "Retrieve a specific AIRecommendation by UID. **Available for Staff tokens**",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AIRecommendation retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AI Recommendations"
        ],
        "summary": "Update an AIRecommendation",
        "description": "Update an existing AIRecommendation by UID. **Available for Staff tokens**",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AIRecommendation updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v3/ai/ai_recommended_actions/{uid}": {
      "get": {
        "tags": [
          "AI Recommended Actions"
        ],
        "summary": "Retrieve an AIRecommendedAction",
        "description": "Retrieve a specific AIRecommendedAction by UID. **Available for Staff tokens**",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AIRecommendedAction retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendedAction.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v3/ai_agent_scheduling/AIRecommnedation/": {
      "post": {
        "summary": "Create an AIRecommendation",
        "description": "Create a new AIRecommendation for a client including a list of recommended actions and reasoning./n Available for **Staff Tokens**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "object",
                    "description": "The context in which the recommendation was generated.",
                    "properties": {
                      "context_uid": {
                        "type": "string",
                        "description": "A unique identifier for the context associated with this recommendation."
                      },
                      "context_type": {
                        "type": "string",
                        "description": "The type of context (e.g., 'matter','client', 'business').",
                        "enum": [
                          "matter"
                        ]
                      }
                    }
                  },
                  "recommendation_type": {
                    "type": "string",
                    "description": "The type of recommendation. Possible values: 'schedule' - generate an appointment, 'client_next_best_action' - next best scheduling action for this client.",
                    "enum": [
                      "schedule",
                      "client_next_best_action"
                    ]
                  }
                },
                "required": [
                  "context",
                  "recommendation_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "AI Scheduling Agent"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/ai_agent_sales/AIRecommnedation/": {
      "post": {
        "summary": "Create an AIRecommendation",
        "description": "Create a new AIRecommendation for a client including a list of recommended actions and reasoning - Available for **Staff Tokens**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "object",
                    "description": "The context in which the recommendation was generated.",
                    "properties": {
                      "context_uid": {
                        "type": "string",
                        "description": "A unique identifier for the context associated with this recommendation."
                      },
                      "context_type": {
                        "type": "string",
                        "description": "The type of context (e.g., 'matter','client', 'business').",
                        "enum": [
                          "matter",
                          "client",
                          "business"
                        ]
                      }
                    }
                  },
                  "recommendation_type": {
                    "type": "string",
                    "description": "The type of recommendation. Possible values 'estimate' - generate an estimate,'client_next_best_action' - recommend on the next best sales related action).",
                    "enum": [
                      "estimate",
                      "client_next_best_action"
                    ]
                  }
                },
                "required": [
                  "context",
                  "recommendation_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "AI Sales Agent"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/ai/bizai_chats": {
      "get": {
        "operationId": "ChatsController_getChats",
        "summary": "Get all BizAIChats",
        "description": "Get a list of all chat sessions\n\nAvailable for **Staff Tokens**",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number of results.",
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "How many items to return per page. Max: 100",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 25,
              "type": "number"
            }
          },
          {
            "description": "Sort by fields. Example: sort=created_at:asc,updated_at:desc",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "updated_at:desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/MultiChatResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "BizAI Chats"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ChatsController_createChat",
        "summary": "Create a BizAIChat",
        "description": "Create a new chat session between a user and an agent\n\nAvailable for **Staff Tokens**",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/BizAIChat.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "BizAI Chats"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/ai/bizai_chats/{uid}": {
      "get": {
        "operationId": "ChatsController_getChat",
        "summary": "Retrieve a BizAIChat",
        "description": "Retrieve a specific BizAIChat session based on it’s unique identifier (UID)\n\nAvailable for **Staff Tokens**",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the BizAIChat",
            "schema": {
              "type": "string"
            },
            "example": "94ca2054-3bb0-4788-8e9e-ee2442975cdd"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "https://vcita.github.io/developers-hub/entities/ai/BizAIChat.json"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "BizAI Chats"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v3/ai/bizai_chat_messages": {
      "get": {
        "operationId": "ChatMessagesController_getMessages",
        "summary": "Get all BizAIChatMessages",
        "description": "Get all BizAIChatMessages exchanged within a specific chat\n\nAvailable for **Staff Tokens**",
        "parameters": [
          {
            "name": "ai_chat_uid",
            "required": true,
            "in": "query",
            "description": "Unique identifier of the BizAIChat",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number of results.",
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "How many items to return per page. Max: 100",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 25,
              "type": "number"
            }
          },
          {
            "description": "Sort by fields. Example: sort=created_at:asc,updated_at:desc",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "updated_at:desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://vcita.github.io/developers-hub/entities/response.json"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/MultiMessageResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "BizAI Chat Messages"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ChatMessagesController_createMessage",
        "summary": "Create a BizAIChatMessage",
        "description": "Create a new BizAIChatMessage in a BizAIChat thread and get an AI response\n\nAvailable for **Staff Tokens**",
        "parameters": [
          {
            "name": "bizai_chat_uid",
            "required": true,
            "in": "query",
            "description": "Unique identifier of the BizAIChat",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://vcita.github.io/developers-hub/entities/ai/BizAIChatStreamMessage.json"
                }
              }
            }
          }
        },
        "tags": [
          "BizAI Chat Messages"
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "success",
          "errors"
        ]
      },
      "StaffAiSettingsRequest": {
        "type": "object",
        "properties": {
          "ai_recommendations": {
            "type": "object",
            "description": "AI recommendations settings configuration for a staff member",
            "properties": {
              "enable": {
                "type": "boolean",
                "description": "Whether AI recommendations are enabled for this staff member"
              },
              "sub_options": {
                "type": "object",
                "description": "Specific AI recommendation sub-options that can be enabled or disabled individually",
                "properties": {
                  "next_best_action": {
                    "type": "boolean",
                    "description": "Whether next best action recommendations are enabled"
                  },
                  "estimate": {
                    "type": "boolean",
                    "description": "Whether estimate recommendations are enabled"
                  },
                  "scheduling": {
                    "type": "boolean",
                    "description": "Whether scheduling recommendations are enabled"
                  }
                },
                "required": [
                  "next_best_action",
                  "estimate",
                  "scheduling"
                ]
              }
            },
            "required": [
              "enable",
              "sub_options"
            ]
          }
        },
        "required": [
          "ai_recommendations"
        ],
        "example": {
          "ai_recommendations": {
            "enable": true,
            "sub_options": {
              "next_best_action": true,
              "estimate": false,
              "scheduling": true
            }
          }
        }
      },
      "AIRecommendationRequest": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "description": "A list of recommended actions related to this entity.",
            "items": {
              "$ref": "#/components/schemas/AIRecommendationActionRequest"
            }
          },
          "display": {
            "type": "object",
            "description": "Contains display-related information for the recommendation.",
            "properties": {
              "title": {
                "type": "string",
                "description": "A human-readable title describing the recommendation."
              }
            }
          },
          "context": {
            "type": "object",
            "description": "The context in which the recommendation was generated.",
            "properties": {
              "context_uid": {
                "type": "string",
                "description": "A unique identifier for the context associated with this recommendation."
              },
              "context_type": {
                "type": "string",
                "description": "The type of context (e.g., 'user_message', 'booking_request').",
                "enum": [
                  "matter",
                  "client",
                  "business"
                ]
              }
            }
          },
          "target": {
            "type": "object",
            "description": "The target entity for this recommendation, typically representing the user or business involved.",
            "properties": {
              "target_actor_uid": {
                "type": "string",
                "description": "A unique identifier for the target actor (e.g., a user or business)."
              },
              "target_actor_type": {
                "type": "string",
                "description": "The type of target actor (e.g., 'customer', 'business').",
                "enum": [
                  "staff",
                  "directory"
                ]
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "dismissed": {
                "type": "boolean",
                "description": "Indicates whether the recommendation has been dismissed."
              },
              "dismissed_source_type": {
                "type": "string",
                "enum": [
                  "user",
                  "system"
                ]
              }
            }
          }
        },
        "required": [
          "user_description",
          "staff_uid",
          "sources",
          "actions"
        ]
      },
      "AIRecommendationUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "dismissed": {
                "type": "boolean",
                "description": "Indicates whether the recommendation has been dismissed."
              },
              "dismissed_source_type": {
                "type": "string",
                "enum": [
                  "user",
                  "system"
                ]
              }
            }
          }
        }
      },
      "AIRecommendationList": {
        "type": "object",
        "properties": {
          "airecommendations": {
            "description": "List of Coupons",
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/ai/AIRecommendation.json"
            }
          }
        }
      },
      "AIRecommendationActionRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "reply",
              "estimate",
              "schedule"
            ],
            "description": "The type of action recommended. Possible values:\n- 'reply': Suggests responding to a user message.\n- 'estimate': Suggests providing a price estimate.\n- 'schedule': Suggests scheduling an appointment or meeting."
          },
          "display": {
            "type": "object",
            "description": "Contains display-related information for the recommendation.",
            "properties": {
              "btn_text": {
                "type": "string",
                "description": "A human-readable title describing the recommendation."
              }
            }
          },
          "reason": {
            "type": "string",
            "description": "The reason why this action is recommended, providing context for decision-making."
          },
          "payload": {
            "type": "object",
            "description": "Additional data related to the recommended action. The structure depends on the action type."
          },
          "evidence": {
            "type": "array",
            "description": "A list of supporting statements or facts justifying the recommendation.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "ChatResponseDto": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier (UID) of the chat",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "actor_uid": {
            "type": "string",
            "description": "Unique identifier (UID) of the user that created the chat",
            "example": "ghp0f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "agent": {
            "type": "string",
            "description": "Agent associated with the chat",
            "example": "vanilla"
          },
          "metadata": {
            "type": "object",
            "description": "JSON string used to pass additional information to the chat agent in runtime",
            "example": {
              "directory_uid": "k98axtpqg7h1whh6",
              "instruction": "You are a helpful assistant. Answer all questions to the best of your ability"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Date the chat was created",
            "example": "2021-07-20T14:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date the chat was last updated",
            "example": "2021-07-20T14:00:00.000Z"
          }
        },
        "required": [
          "uid",
          "actor_uid",
          "agent",
          "metadata",
          "created_at",
          "updated_at"
        ]
      },
      "MultiChatResponseDto": {
        "type": "object",
        "properties": {
          "biz_ai_chats": {
            "description": "List of BizAIChats",
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/ai/BizAIChat.json"
            }
          }
        },
        "required": [
          "biz_ai_chats"
        ]
      },
      "AgentConfigDto": {
        "type": "object",
        "properties": {
          "instruction": {
            "type": "string",
            "description": "A prompt describing the basic instructions for the agent. The instructions are set at the beginning of a chat and set the tone and functionality for the entire conversation.",
            "example": "You are an experienced business consultant with a friendly voice. Answer shortly and ask questions where more information is needed."
          },
          "model_name": {
            "type": "string",
            "description": "OpenAI model name to use for the agent",
            "example": "gpt-3.5-turbo"
          }
        }
      },
      "CreateChatRequestDto": {
        "type": "object",
        "properties": {
          "agent": {
            "type": "string",
            "description": "The agent code name. \n\nAvailable values: \n* vanilla - No business info included in the conversation\n* biz-ai - Seed information on the business is included, as well as a set of instructions to make the bot behave like a biz-ai chat.",
            "enum": [
              "vanilla",
              "biz-ai"
            ],
            "example": "vanilla"
          },
          "config": {
            "description": "The agent configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentConfigDto"
              }
            ]
          }
        },
        "required": [
          "agent"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier (UID) of the message",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "content": {
            "type": "string",
            "description": "Content of the message",
            "example": "Hello, how can I help you?"
          },
          "author_role": {
            "type": "string",
            "description": "Role of the author of the message",
            "example": "ai_assistant"
          },
          "created_at": {
            "type": "string",
            "description": "Date the message was created",
            "example": "2021-07-20T14:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date the message was last updated",
            "example": "2021-07-20T14:00:00.000Z"
          }
        },
        "required": [
          "uid",
          "content",
          "author_role",
          "created_at",
          "updated_at"
        ]
      },
      "MultiMessageResponseDto": {
        "type": "object",
        "properties": {
          "bizai_chat_messages": {
            "description": "List of BizAIChatMessages",
            "type": "array",
            "items": {
              "$ref": "https://vcita.github.io/developers-hub/entities/ai/BizAIChatMessage.json"
            }
          }
        },
        "required": [
          "bizai_chat_messages"
        ]
      },
      "TextContentDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text sent to the bot",
            "example": "Tell me a joke!"
          }
        },
        "required": [
          "text"
        ]
      },
      "PromptContentDto": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "prompt-xyz123",
            "description": "The uid of the prompt you wish to use"
          },
          "variables": {
            "type": "object",
            "example": {
              "name": "John",
              "age": 30
            },
            "description": "A key-value object listing values of variables you want BizAI to replace in the prompt. For more information consult our “Using Prompts” guide: https://dash.readme.com/project/vcita-developers-hub/v3.0/docs/using-prompts"
          }
        },
        "required": [
          "uid",
          "variables"
        ]
      },
      "SendMessageRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of message sent to the bot (free text or a saved prompt template). A saved prompt can include reusable instructions that can be retrieved from BizAI for advanced functionality.",
            "example": "text",
            "enum": [
              "text",
              "prompt"
            ]
          },
          "content": {
            "description": "An object representing the content sent to the bot. Each prompt type must have its own object (“Text Content Object” for “text” and “Prompt Content Object” for “prompt”).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TextContentDto"
              },
              {
                "$ref": "#/components/schemas/PromptContentDto"
              }
            ]
          },
          "streaming": {
            "type": "boolean",
            "description": "Stream response option. If true, the response will be streamed to the client. If false, the response will be sent as a single message",
            "default": true
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "MessageStreamResponseDto": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier (UID) of the message",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "delta": {
            "type": "string",
            "description": "Token that is part of the content of the message",
            "example": "Hello"
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the stream has finished",
            "example": "'stop' or null"
          }
        },
        "required": [
          "uid",
          "delta",
          "finish_reason"
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Authentication method using a Bearer token. Include the token in the Authorization header. Example: 'Authorization: Bearer {app_token}'"
      }
    }
  },
  "tags": []
}
