{
  "basePath": "/business/communication",
  "definitions": {
    "BaseDto": {
      "properties": {},
      "type": "object"
    },
    "ChannelResponseDto": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelResponseEntity"
        }
      },
      "required": [
        "channel"
      ],
      "type": "object"
    },
    "ChannelResponseEntity": {
      "properties": {
        "display_name": {
          "description": "Channel display name.",
          "type": "string"
        },
        "status": {
          "description": "Channel status. Enum ChannelStatus.",
          "enum": [
            "pending",
            "active",
            "inactive",
            "deleted",
            "blocked",
            "error"
          ],
          "type": "string"
        },
        "uid": {
          "description": "Channel uid. 36 chars uuid, this is the identifier for the created channel.",
          "type": "string"
        }
      },
      "required": [
        "uid",
        "status",
        "display_name"
      ],
      "type": "object"
    },
    "CreateChannelDto": {
      "properties": {
        "business_uid": {
          "description": "Business uid. 16 business identifier for which the channel will be created for.",
          "type": "string"
        },
        "display_name": {
          "description": "channel display name..",
          "type": "string"
        },
        "type": {
          "description": "Type of channel. Enum ChannelType.",
          "enum": [
            "transactional",
            "promotional"
          ],
          "type": "string"
        }
      },
      "required": [
        "business_uid",
        "type"
      ],
      "type": "object"
    },
    "CreateMessageDto": {
      "properties": {
        "attachments": {
          "description": "Message attachments",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "channel_uid": {
          "description": "Channel uid. 36 chars uuid.",
          "type": "string"
        },
        "contact_uid": {
          "description": "Contact Uid",
          "type": "string"
        },
        "created_at": {
          "description": "Message creation date time [optional | Format: YYYY-MM-DD HH:MM:SS].",
          "type": "string"
        },
        "direction": {
          "description": "Message Direction.",
          "enum": [
            "client_to_business",
            "business_to_client"
          ],
          "type": "string"
        },
        "external_uid": {
          "description": "Paired contact code.",
          "type": "string"
        },
        "message": {
          "description": "Message content.",
          "type": "string"
        },
        "message_uid": {
          "description": "Message uid. Max 255 chars identifier. vCita will send message status updates based on this identifier.Must be unique per channel.",
          "type": "string"
        }
      },
      "required": [
        "external_uid",
        "message",
        "message_uid",
        "channel_uid"
      ],
      "type": "object"
    },
    "CreateSessionDto": {
      "properties": {
        "business_uid": {
          "description": "16 chars business identifier.",
          "type": "string"
        },
        "channel_uid": {
          "description": "36 chars channel identifier.",
          "type": "string"
        },
        "contact_uid": {
          "description": "vCita contact identifier.",
          "type": "string"
        },
        "external_uid": {
          "description": "App's contact identifier.",
          "type": "string"
        }
      },
      "required": [
        "business_uid",
        "channel_uid",
        "contact_uid",
        "external_uid"
      ],
      "type": "object"
    },
    "ErrorResponse": {
      "properties": {
        "errors": {
          "items": {
            "$ref": "#/definitions/StandardError"
          },
          "type": "array"
        },
        "success": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "success",
        "errors"
      ],
      "type": "object"
    },
    "MessageResponseDto": {
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageResponseEntity"
        }
      },
      "required": [
        "message"
      ],
      "type": "object"
    },
    "MessageResponseEntity": {
      "properties": {
        "status": {
          "description": "Message status. Enum MessageStatus.",
          "enum": [
            "pending",
            "channel_pending",
            "sent",
            "received",
            "read",
            "error",
            "unavailable"
          ],
          "type": "string"
        },
        "uid": {
          "description": "Message uid",
          "type": "string"
        }
      },
      "required": [
        "uid",
        "status"
      ],
      "type": "object"
    },
    "MultiSessionResponseDto": {
      "properties": {
        "sessions": {
          "items": {
            "$ref": "#/definitions/SessionResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "sessions"
      ],
      "type": "object"
    },
    "Response": {
      "properties": {
        "data": {
          "type": "object"
        },
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success",
        "data"
      ],
      "type": "object"
    },
    "SessionResponse": {
      "properties": {
        "status": {
          "description": "Session status. Enum SessionStatus.",
          "enum": [
            "pending",
            "inactive",
            "active"
          ],
          "type": "string"
        },
        "uid": {
          "description": "Session uid",
          "type": "string"
        }
      },
      "required": [
        "uid",
        "status"
      ],
      "type": "object"
    },
    "SessionResponseDto": {
      "properties": {
        "session": {
          "$ref": "#/definitions/SessionResponse"
        }
      },
      "required": [
        "session"
      ],
      "type": "object"
    },
    "StandardError": {
      "properties": {
        "code": {
          "enum": [
            "missing",
            "missing_field",
            "invalid",
            "already_exists",
            "duplicate",
            "too_long",
            "unexpected",
            "unauthorized",
            "timeout"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "code"
      ],
      "type": "object"
    },
    "UpdateMessageDto": {
      "properties": {
        "channel_uid": {
          "description": "Channel uid of the message.",
          "type": "string"
        },
        "status": {
          "description": "Message's new status. Enum MessageStatus",
          "enum": [
            "pending",
            "channel_pending",
            "sent",
            "received",
            "read",
            "error",
            "unavailable"
          ],
          "type": "string"
        }
      },
      "required": [
        "status",
        "channel_uid"
      ],
      "type": "object"
    },
    "UpdateSessionDto": {
      "properties": {
        "status": {
          "description": "Session status. Enum SessionStatus.",
          "enum": [
            "pending",
            "inactive",
            "active"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    }
  },
  "host": "api.vcita.biz",
  "info": {
    "contact": {},
    "description": "",
    "title": "communicationgw",
    "version": "default"
  },
  "paths": {
    "/channels": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new business' communication channel",
        "operationId": "ChannelsController_create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateChannelDto"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Channel has been successfully registered.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ChannelResponseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ]
      }
    },
    "/channels/{uid}": {
      "delete": {
        "description": "Deletes an existing channel.",
        "operationId": "ChannelsController_deleteChannel",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Channel deleted successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/BaseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ]
      },
      "put": {
        "description": "Update an existing communication channel.",
        "operationId": "ChannelsController_updateChannel",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Channel status updated successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/BaseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "channels"
        ]
      }
    },
    "/messages": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Send a message to a business",
        "operationId": "MessagesController_createMessage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMessageDto"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Message sent successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/MessageResponseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "messages"
        ]
      }
    },
    "/messages/{messageUid}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update message status.",
        "operationId": "MessagesController_updateStatus",
        "parameters": [
          {
            "in": "path",
            "name": "messageUid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMessageDto"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Message status updated successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/BaseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "messages"
        ]
      }
    },
    "/oauth": {
      "get": {
        "operationId": "OauthController_generateOauthToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "oauth"
        ]
      }
    },
    "/sessions": {
      "get": {
        "description": "Deep object style. Exmaple: filter[channel_uid]=channeluuid",
        "operationId": "SessionsController_getSession",
        "parameters": [
          {
            "description": "Channel  identifier",
            "in": "query",
            "name": "channel_uid",
            "required": true,
            "type": "string",
            "x-example": "c697a91c-ce0c-469e-918b-fdc2ff6f8a04"
          },
          {
            "description": "Business identifier",
            "in": "query",
            "name": "business_uid",
            "required": true,
            "type": "string",
            "x-example": "5wbdaiig4avpwl40"
          },
          {
            "description": "vCita contanct identifier",
            "in": "query",
            "name": "contact_uid",
            "required": false,
            "type": "string",
            "x-example": "2nbreiig9avawl81"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Sessions of specific channel (can be filtered by contact_uid)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/MultiSessionResponseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "* Required query params",
        "tags": [
          "sessions"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new inactive session over a channel between the app's contact and vCita's contact.",
        "operationId": "SessionsController_createSession",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSessionDto"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Session created successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/SessionResponseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ]
      }
    },
    "/sessions/typing": {
      "post": {
        "description": "Populate typing indicator status.",
        "operationId": "SessionsTypingController_typingStatus",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/BaseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ]
      }
    },
    "/sessions/{uid}": {
      "delete": {
        "description": "Deletes an existing session.",
        "operationId": "SessionsController_logicDelete",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/BaseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Activating/deactivating an existing session.",
        "operationId": "SessionsController_updateStatus",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSessionDto"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Session activation request received successfully. Once change has occurred, the App will receive an API request confirming the status change.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Response"
                },
                {
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/SessionResponseDto",
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized to perform action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "",
        "tags": [
          "sessions"
        ]
      }
    }
  },
  "securityDefinitions": {
    "default": {
      "authorizationUrl": "https://ignore.myclients.io",
      "flow": "implicit",
      "scopes": {
        "business/communication": "All business/communication scopes",
        "business/communication_create": "business/communication create scope",
        "business/communication_delete": "business/communication delete scope",
        "business/communication_read": "business/communication read scope",
        "business/communication_update": "business/communication update scope"
      },
      "type": "oauth2",
      "x-scopes-bindings": {
        "business/communication": "",
        "business/communication_create": "",
        "business/communication_delete": "",
        "business/communication_read": "",
        "business/communication_update": ""
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "",
      "name": "communicationgw"
    }
  ],
  "x-components": {},
  "x-throttling-tier": "8ReqPerSec"
}