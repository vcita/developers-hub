{
  "openapi": "3.0.1",
  "info": {
    "title": "Platform Client Payment Cards API",
    "version": "v1",
    "description": "API documentation for retrieving client payment cards through the platform API"
  },
  "servers": [
    {
      "url": "https://api.vcita.com",
      "description": "inTandem"
    }
  ],
  "paths": {
    "/platform/v1/clients/payment/cards": {
      "get": {
        "summary": "Get Client Payment Cards",
        "description": "Retrieve all payment cards for a client - Available for **Client Tokens**",
        "tags": ["Client Payment Cards"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Bearer .+$"
            },
            "description": "Client JWT Token. Format: 'Bearer CLIENT_JWT_TOKEN'",
            "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbnRpdHlfdWlkIjoiQ0xJRU5UX1VJRCIsImV4dHJhIjp7ImJ1c2luZXNzX3VpZCI6IkJVU0lORVNTX1VJRCJ9LCJ0eXBlIjoiY2xpZW50IiwiZXhwIjoxNjMwMDAwMDAwfQ.SIGNATURE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved client payment cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"],
                      "example": "OK"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "max_limit_reached": {
                          "type": "boolean",
                          "description": "Whether the maximum card limit has been reached",
                          "example": false
                        },
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PaymentCard"
                          }
                        }
                      },
                      "required": ["max_limit_reached", "cards"]
                    }
                  },
                  "required": ["status", "data"]
                },
                "example": {
                  "status": "OK",
                  "data": {
                    "max_limit_reached": false,
                    "cards": [
                      {
                        "id": "card_123456",
                        "client_id": "client_789012",
                        "default": true,
                        "active": true,
                        "card_brand": "visa",
                        "last_4": "4242",
                        "exp_month": 12,
                        "exp_year": 2025,
                        "cardholder_name": "John Doe",
                        "staff_id": null,
                        "staff_name": "",
                        "business_id": "business_345678",
                        "payment_provider": "stripe",
                        "created_at": "2023-01-15T10:30:00.000Z",
                        "initiator": "client",
                        "usage_permission": "client"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Error",
                  "error": "Unauthorized"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Error",
                  "error": "Invalid request parameters"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Error",
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/platform/v1/clients/{client_id}/payment/cards": {
      "get": {
        "summary": "Get Client Payment Cards (Staff Access)",
        "description": "Retrieve all payment cards for a specific client - Available for **Staff & Internal tokens**",
        "tags": ["Client Payment Cards"],
        "operationId": "getClientPaymentCards",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the client",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]{16}$"
            },
            "example": "m729844bwakz8jf6"
          },
          {
            "name": "filter[usage_permission]",
            "in": "query",
            "required": false,
            "description": "Filter cards by usage permission scope",
            "schema": {
              "type": "string",
              "enum": ["all", "staff", "client"],
              "default": "staff"
            },
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved client payment cards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCardsResponse"
                },
                "example": {
                  "status": "OK",
                  "data": {
                    "max_limit_reached": false,
                    "cards": [
                      {
                        "id": "card_123456",
                        "client_id": "client_789012", 
                        "default": true,
                        "active": true,
                        "card_brand": "visa",
                        "last_4": "4242",
                        "exp_month": 11,
                        "exp_year": 2025,
                        "cardholder_name": "John Doe",
                        "staff_id": null,
                        "staff_name": "Jane Smith", 
                        "business_id": "business_345678",
                        "payment_provider": "stripe",
                        "created_at": "2021-02-18T11:09:54.000Z",
                        "initiator": "staff",
                        "usage_permission": "all"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Failure",
                  "error": "401 Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"  
                },
                "example": {
                  "status": "Error",
                  "error": "Record not found"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Error",
                  "error": "Unable to retrieve cards"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "Error",
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Client JWT token containing entity_uid, business_uid, and type='client'"
      }
    },
    "schemas": {
      "PaymentCard": {
        "type": "object",
        "description": "Payment card object containing card details and metadata",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment card",
            "example": "card_123456"
          },
          "client_id": {
            "type": "string",
            "description": "UID of the client who owns this card",
            "example": "client_789012"
          },
          "default": {
            "type": "boolean",
            "description": "Whether this is the default card for the client",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "Whether the card is currently active",
            "example": true
          },
          "card_brand": {
            "type": "string",
            "description": "Card brand (visa, mastercard, amex, etc.)",
            "enum": ["visa", "mastercard", "amex", "discover", "diners", "jcb", "unionpay"],
            "example": "visa"
          },
          "last_4": {
            "type": "string",
            "description": "Last 4 digits of the card number",
            "pattern": "^[0-9]{4}$",
            "example": "4242"
          },
          "exp_month": {
            "type": "integer",
            "description": "Card expiration month (1-12)",
            "minimum": 1,
            "maximum": 12,
            "example": 12
          },
          "exp_year": {
            "type": "integer",
            "description": "Card expiration year",
            "minimum": 2023,
            "example": 2025
          },
          "cardholder_name": {
            "type": "string",
            "description": "Name on the card",
            "example": "John Doe"
          },
          "staff_id": {
            "type": "string",
            "nullable": true,
            "description": "UID of the staff member who added this card (if applicable)",
            "example": null
          },
          "staff_name": {
            "type": "string",
            "description": "Display name of the staff member who added this card",
            "example": ""
          },
          "business_id": {
            "type": "string",
            "description": "UID of the business this card belongs to",
            "example": "business_345678"
          },
          "payment_provider": {
            "type": "string",
            "description": "Payment provider handling this card",
            "enum": ["stripe", "square", "squarepaymentgateway"],
            "example": "stripe"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the card was created",
            "example": "2023-01-15T10:30:00.000Z"
          },
          "initiator": {
            "type": "string",
            "description": "Who added this card (client or staff)",
            "enum": ["client", "staff"],
            "example": "client"
          },
          "usage_permission": {
            "type": "string",
            "description": "Usage permission scope for the card",
            "enum": ["client", "staff", "all"],
            "example": "client"
          }
        },
        "required": [
          "id",
          "client_id",
          "default",
          "active",
          "card_brand",
          "last_4",
          "exp_month",
          "exp_year",
          "cardholder_name",
          "staff_id",
          "staff_name",
          "business_id",
          "payment_provider",
          "created_at",
          "initiator",
          "usage_permission"
        ]
      },
      "PaymentCardsResponse": {
        "type": "object",
        "description": "Response containing payment cards data",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["OK"],
            "example": "OK"
          },
          "data": {
            "type": "object",
            "properties": {
              "max_limit_reached": {
                "type": "boolean",
                "description": "Whether the maximum card limit has been reached",
                "example": false
              },
              "cards": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            },
            "required": ["max_limit_reached", "cards"]
          }
        },
        "required": ["status", "data"]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Standard error response format",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Error"],
            "example": "Error"
          },
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Unauthorized"
          }
        },
        "required": ["status", "error"]
      }
    }
  }
}
